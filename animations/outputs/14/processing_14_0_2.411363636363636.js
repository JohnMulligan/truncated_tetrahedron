function p_14_0_2_411363636363636(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[433.8837391175581, 433.8837391175581, 433.8837391175581, 433.8837391175581, 433.8837391175581];
let B_y=[900.9688679024191, 900.9688679024191, 900.9688679024191, 900.9688679024191, 900.9688679024191];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[781.83148246803, 751.164792969682, 669.976070290332, 566.887880855621, 478.2433084389849];
let C_y=[623.489801858734, 608.721502553478, 569.6230743777, 519.97841884712, 477.289442676222];
let C_z=[0.0, 109.482758954321, 180.368069430376, 187.665767268101, 128.803095633525];
let D_x=[974.927912181824, 1052.614209154866, 1105.578614053914, 853.392436813499, 350.7454431841989];
let D_y=[222.520933956314, 313.155794431276, 479.5679738120821, 537.0346680021682, 448.8183877808153];
let D_z=[0.0, -31.341336494561, 194.6076945650383, 527.792931686504, 554.239292475987];
let E_x=[974.927912181824, 1135.0043820304377, 1402.724339127031, 1245.889542589866, 473.1346714643829];
let E_y=[-222.520933956311, -51.32960012398, 365.8186593362071, 738.0225510546272, 824.0390597130403];
let E_z=[0.0, -273.052984465011, -116.5639232316347, 467.6917085839363, 759.890911363049];
let F_x=[781.83148246803, 972.1637839550817, 1372.9437799760526, 1337.642167406938, 676.2729224665788];
let F_y=[-623.489801858726, -368.954616020509, 300.5224670721363, 914.6622779831902, 1084.4082707140024];
let F_z=[0.0, -538.871631460202, -555.7811698962317, 69.6438133439983, 461.553871862982];
let G_x=[433.883739117558, 743.2350337955537, 1292.0350568820843, 1063.345180206978, 474.8896570734499];
let G_y=[-900.968867902426, -467.5684802006786, 572.4629670072673, 1223.3002192571312, 1026.6847360781933];
let G_z=[0.0, -907.557401916584, -898.6578346278787, -96.3864496033607, 68.902578520003];
let H_x=[0.0, 369.1220964796107, 1278.799660881554, 1225.528857153354, 60.7107762549169];
let H_y=[-1000.000000000006, -632.9570418261056, 510.4671798947379, 1627.5624635033403, 1186.1269866637474];
let H_z=[0.0, -1082.909613227047, -1339.1616494447007, -187.6594302949446, 102.0128126972672];
let I_x=[-433.88373911756, -31.3367401459323, 1341.6323552164347, 1656.125443781213, 6.1184892748639];
let I_y=[-900.968867902426, -812.5840437065816, 153.8569329611049, 1708.5199983536234, 1342.3908381901983];
let I_z=[0.0, -1009.2270199019406, -1597.8959697420107, -109.5907340680281, 515.1272703280492];
let J_x=[-781.831482468032, -473.1755918268373, 1344.9612535534154, 1765.18900901507, 22.5503757955455];
let J_y=[-623.489801858726, -762.2768734775638, 95.2511632036525, 2032.4386827244014, 997.4959342836903];
let J_z=[0.0, -1026.830484447377, -2039.0496236792308, 175.4427531736459, 795.9114624754242];
let K_x=[-974.927912181822, -826.9698587501443, 1029.0791074978165, 1618.992841060784, -166.5223038933935];
let K_y=[-222.520933956311, -517.7743190129077, 121.2373940184574, 2445.3853938224024, 647.9457155344263];
let K_z=[0.0, -912.329909131675, -2351.468332796516, 96.9318719915766, 595.5906433807802];
let L_x=[-974.927912181822, -980.3355500470783, 594.3392595857165, 1369.037153269481, -299.8070428009425];
let L_y=[222.520933956314, -156.7434750546807, 215.333439664166, 2519.4315770937483, 776.8076093809573];
let L_z=[0.0, -702.096803653516, -2336.9954952597163, -263.7640956583024, 191.0018955345452];
let M_x=[-781.831482468032, -884.5555154931018, 316.48246550861046, 1274.346108576475, -193.1085165148425];
let M_y=[623.489801858734, 206.1329434295123, 317.857366546389, 2177.8446292122435, 1205.9985244207553];
let M_z=[0.0, -462.912451982919, -2004.8107415502684, -532.8630129491524, 141.2741655355122];
let N_x=[-433.88373911756, -570.0546192962398, 371.7438754161861, 1433.046174140038, 6.1192616647735];
let N_y=[900.968867902429, 455.5859682451043, 363.7817215555512, 1774.6043856698175, 1342.3900914309042];
let N_z=[0.0, -270.754603075081, -1565.6076058747753, -431.5029647391734, 515.1296149344502];
let O_x=[0.0, -188.2668759861868, 592.5714520222451, 1330.052445216285, 248.7706075728705];
let O_y=[999.999999999999, 679.1656985377193, 658.9959176543402, 1596.5986841779816, 1004.3076259573933];
let O_z=[0.0, -318.8429327992974, -1316.3165630609583, -36.8277486007174, 672.8725547558732];
let first_x=[-193.09642971379355, -193.09642971379355, -193.09642971379355, -193.09642971379355, -193.09642971379355];
let first_y=[846.010735815048, 846.010735815048, 846.010735815048, 846.010735815048, 846.010735815048];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[541.0441730642652, 541.0441730642652, 541.0441730642652, 541.0441730642652, 541.0441730642652];
let B_C_y=[678.4479339461052, 678.4479339461052, 678.4479339461052, 678.4479339461052, 678.4479339461052];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[867.767478235117, 1051.103057859954, 1278.093030208934, 1025.81603346484, 325.3150474661679];
let D_E_y=[0.0, 178.344409525787, 526.0727701592724, 707.307473741918, 630.274297743117];
let D_E_z=[0.0, -238.277393222393, 24.093751475812, 575.502465280597, 719.847179866094];
let F_G_x=[541.044173064266, 775.5732694633667, 1227.703684688331, 1181.0634447337382, 669.0293298712709];
let F_G_y=[-678.447933946096, -359.083937297983, 415.5902108327754, 1006.1856844479252, 1070.8245933081332];
let F_G_z=[0.0, -688.048251497916, -719.0712605909417, -98.0031202025397, 215.054503249425];
let H_I_x=[-193.096429713796, 142.5661467101877, 1205.309110469912, 1455.481708474936, -31.7702295694271];
let H_I_y=[-846.010735815046, -638.9249347302236, 310.6920078877563, 1690.2060818818923, 1340.6043047839344];
let H_I_z=[0.0, -984.7479581330416, -1464.4131735959627, -252.4389633123887, 271.077730408053];
let J_K_x=[-781.831482468032, -605.0346773343023, 1210.9416779329708, 1640.019602623159, -3.9671247570514];
let J_K_y=[-376.510198141266, -553.8041225257756, 211.5297870967306, 2238.283450899405, 757.0347219183303];
let J_K_z=[0.0, -1014.5333981190123, -2210.8546283458127, 229.8438172341179, 746.1706124157203];
let L_M_x=[-781.831482468032, -864.5327200201173, 475.35252069249145, 1217.089211924202, -229.48776482923];
let L_M_y=[376.510198141264, 57.0678173722693, 370.7423167247694, 2363.571182886785, 975.0718131815853];
let L_M_z=[0.0, -658.814469602498, -2186.3662764781166, -380.4615047598724, 61.5977638799372];
let last_x=[-193.096429713796, -332.3904508081288, 568.8560128086665, 1485.613130406858, 107.6099135958585];
let last_y=[846.010735815039, 479.1476915233083, 448.447311471038, 1681.2800325876526, 1205.849273112034];
let last_z=[0.0, -333.679263308188, -1443.2251405079073, -208.9581268231364, 694.1692115488732];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(N_x[t],N_y[t],N_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(N_x[t],N_y[t],N_z[t]);
vertex(O_x[t],O_y[t],O_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}