function p_14_0_2_411864997362827(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[433.8837391175581, 433.8837391175581, 433.8837391175581, 433.8837391175581, 433.8837391175581];
let B_y=[900.9688679024191, 900.9688679024191, 900.9688679024191, 900.9688679024191, 900.9688679024191];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[781.83148246803, 751.15242821192, 669.935331249867, 566.82430578396, 478.1851430012433];
let C_y=[623.489801858734, 608.715547999972, 569.603455489817, 519.947802706219, 477.261431677714];
let C_z=[0.0, 109.502694585589, 180.385347253013, 187.648655221217, 128.730953142529];
let D_x=[974.927912181824, 1052.639153428917, 1105.549545185769, 853.126639256048, 350.3288664164643];
let D_y=[222.520933956314, 313.189266429867, 479.624679011806, 537.0170034039855, 448.7187231331485];
let D_z=[0.0, -31.324275893936, 194.7499076601034, 527.945408704319, 554.0547715703];
let E_x=[974.927912181824, 1135.0636893486103, 1402.78636092665, 1245.570917793536, 472.3927071113473];
let E_y=[-222.520933956311, -51.261464453806, 366.007395329162, 738.1734548366514, 824.0045815949975];
let E_z=[0.0, -273.076473054452, -116.3829456549356, 468.0635710123558, 759.780821035422];
let F_x=[781.83148246803, 972.2396183602294, 1373.071315049945, 1337.3775579162955, 675.6605821496183];
let F_y=[-623.489801858726, -368.850017150128, 300.8332483411413, 914.9128112839466, 1084.4006080631004];
let F_z=[0.0, -538.948805759814, -555.6227557906836, 70.0723589144908, 461.555495866331];
let G_x=[433.883739117558, 743.3539772135395, 1292.1593408052895, 1062.9247518938125, 474.6729321295543];
let G_y=[-900.968867902426, -467.3937586183344, 572.8973190541113, 1223.3984836614675, 1026.3754357141545];
let G_z=[0.0, -907.680087982355, -898.4006110352806, -95.9833889515152, 68.745989733333];
let H_x=[0.0, 369.2755211568494, 1279.1322765723837, 1224.8712171092704, 60.2596902959603];
let H_y=[-1000.000000000006, -632.7994095615944, 511.0580956376227, 1627.8362584719614, 1185.2687042666776];
let H_z=[0.0, -1083.089732943631, -1338.9326419250685, -186.8992451357653, 101.5615104030369];
let I_x=[-433.88373911756, -31.1503773707746, 1342.2548174280257, 1655.3548664609605, 5.2209461844138];
let I_y=[-900.968867902426, -812.5173086144894, 154.5479266995147, 1709.0149544640772, 1341.4588638619366];
let I_z=[0.0, -1009.4497930773017, -1597.7343198075866, -108.4383558148401, 514.6445951298228];
let J_x=[-781.831482468032, -472.9964228340046, 1345.9348930917618, 1763.9251191452865, 22.2685113015211];
let J_y=[-623.489801858726, -762.2947391718469, 96.1345707122614, 2032.687783874197, 996.5900530687246];
let J_z=[0.0, -1027.1141589659778, -2038.9107029930146, 177.0623691034549, 795.424131529485];
let K_x=[-974.927912181822, -826.8433902156066, 1030.2530979734017, 1617.3567540493575, -165.8987049190319];
let K_y=[-222.520933956311, -517.8584149712289, 122.1938919680452, 2445.570713785968, 646.6493823068596];
let K_z=[0.0, -912.6350286351629, -2351.525770131039, 98.9108193060296, 594.9325110519529];
let L_x=[-974.927912181822, -980.2734860179266, 595.4858513258556, 1367.5720229824656, -299.1968358953859];
let L_y=[222.520933956314, -156.8661789514939, 216.1932058775601, 2519.6989210620436, 775.3232479319996];
let L_z=[0.0, -702.3826197768559, -2337.248710832539, -261.8867156176894, 190.2883355366679];
let M_x=[-781.831482468032, -884.5417034549433, 317.46035862468165, 1273.4798575303662, -193.3818139902449];
let M_y=[623.489801858734, 205.9941111860061, 318.4969987902081, 2178.2364243186075, 1204.7592207484327];
let M_z=[0.0, -463.1544863063069, -2005.1372482795011, -531.3533961432174, 140.7889356858908];
let N_x=[-433.88373911756, -570.0621954102143, 372.56293989300696, 1432.6094458213342, 5.2893209554671];
let N_y=[900.968867902429, 455.4411137159701, 364.2011880589464, 1775.1187496818386, 1341.3928610903847];
let N_z=[0.0, -270.9538199600879, -1565.891193298909, -430.1793939442474, 514.8521558258228];
let O_x=[0.0, -188.2955761394773, 593.2684360653419, 1329.5665719211781, 248.3909769456121];
let O_y=[999.999999999999, 679.060796876064, 659.3460150706834, 1596.7659887673235, 1003.6639081535496];
let O_z=[0.0, -319.0240800917515, -1316.40997307842, -35.6737247736734, 672.6590105508247];
let first_x=[-193.09642971379355, -193.09642971379355, -193.09642971379355, -193.09642971379355, -193.09642971379355];
let first_y=[846.010735815048, 846.010735815048, 846.010735815048, 846.010735815048, 846.010735815048];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[541.0441730642652, 541.0441730642652, 541.0441730642652, 541.0441730642652, 541.0441730642652];
let B_C_y=[678.4479339461052, 678.4479339461052, 678.4479339461052, 678.4479339461052, 678.4479339461052];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[867.767478235117, 1051.166185542867, 1278.112776391076, 1025.473868676838, 324.7086078001443];
let D_E_y=[0.0, 178.411120098488, 526.2019121543055, 707.329388030289, 630.15305823022];
let D_E_z=[0.0, -238.282257835973, 24.305144639324, 575.789413619421, 719.657033175488];
let F_G_x=[541.044173064266, 775.6643613323034, 1227.83428073722, 1180.8126750027668, 668.6422168575283];
let F_G_y=[-678.447933946096, -358.955530207607, 415.9258560553964, 1006.3761740211975, 1070.7487261414115];
let F_G_z=[0.0, -688.143953485824, -718.8980453050926, -97.6202627702552, 215.053379605521];
let H_I_x=[-193.096429713796, 142.7155816101524, 1205.7922083428462, 1454.8295714019116, -32.5538864527517];
let H_I_y=[-846.010735815046, -638.8254431325554, 311.2925622457563, 1690.6935729388606, 1339.5995482297856];
let H_I_z=[0.0, -984.9408390913165, -1464.2877005114176, -251.4518435456292, 270.577945181385];
let J_K_x=[-781.831482468032, -604.8974144684756, 1212.0189753830928, 1638.5327701240885, -3.70904023559705];
let J_K_y=[-376.510198141266, -553.8477772751744, 212.4559096853695, 2238.354950084048, 756.0741154721276];
let J_K_z=[0.0, -1014.8293254576892, -2210.7676136372816, 231.6215131820939, 745.6629495639609];
let L_M_x=[-781.831482468032, -864.5044309602663, 476.38345889394265, 1215.8916418735535, -229.2523399757611];
let L_M_y=[376.510198141264, 56.9588371619861, 371.5047671387662, 2363.7814684486043, 973.7930589475056];
let L_M_z=[0.0, -659.077735207491, -2186.6105227524986, -378.8556628200624, 60.9963162220249];
let last_x=[-193.096429713796, -332.3983509609243, 569.6182095421686, 1485.1423220335212, 106.9034861454871];
let last_y=[846.010735815039, 479.0285214764531, 448.8372367249171, 1681.6977073695975, 1204.9801121530568];
let last_z=[0.0, -333.8700808880739, -1443.3967663965202, -207.6670787286484, 693.9193164458948];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(N_x[t],N_y[t],N_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(N_x[t],N_y[t],N_z[t]);
vertex(O_x[t],O_y[t],O_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}