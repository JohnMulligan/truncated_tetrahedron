

function setup() {
  createCanvas(1000, 800, WEBGL);
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 856.074324813563, 827.013279682411, 781.155778431593, 722.152473991941, 654.700538699628];
let C_y=[500.0, 497.333616425935, 489.546732851838, 477.259252424772, 461.4493646494, 443.375673059908];
let C_z=[0.0, -72.2954602591386, -138.835577844081, -194.323185036274, -234.340989347121, -255.703228129116];
let D_x=[1000.0, 960.538713220209, 849.2236785891822, 685.4729143648375, 496.213174831809, 309.401077570945];
let D_y=[0.0, 5.42468151945, 22.319209329204, 52.167206857707, 96.314539142341, 154.700538081876];
let D_z=[0.0, -195.0227341028736, -360.543340167438, -473.770379959952, -523.438178416956, -511.406456542013];
let E_x=[866.025403784439, 781.800967452496, 557.6783813821272, 266.7200295420165, -4.671656096843, -190.598922640591];
let E_y=[-500.0, -460.937936254176, -347.321884892505, -170.371873816126, 50.4382183223887, 288.675133507994];
let E_z=[0.0, -331.0665484140386, -575.754849084026, -681.307295848523, -645.74493115256, -511.4064571095838];
let F_x=[500.0, 373.915089059926, 69.8967185139982, -239.7862842193465, -396.654117327923, -345.29946227834];
let F_y=[-866.02540378444, -760.716508375489, -470.377494376939, -65.302999151624, 358.9772454125177, 711.324864060827];
let F_z=[0.0, -439.2844320375316, -697.720248993728, -700.3093517301211, -507.532734582889, -255.7032292642578];
let G_x=[0.0, -139.76577230267, -417.5008363648328, -549.4167292875395, -379.3425102825722, -1.876277e-06];
let G_y=[-1000.0, -803.2517768777341, -297.244991424053, 308.330776132616, 785.4859331888547, 999.999999656605];
let G_z=[0.0, -486.949052400467, -677.2763660326547, -520.098414534749, -214.719073795124, -5.67552801024431e-07];
let H_x=[-500.0, -603.893869818977, -708.0486401368628, -488.1756540571703, 33.9965943126908, 499.999998546782];
let H_y=[-866.02540378444, -575.6801943347491, 102.287443461973, 740.567372312675, 1003.1137670202027, 866.025405019935];
let H_z=[0.0, -459.6456396852753, -522.6639485869337, -241.9433353820841, 8.301335552048, 5.67608440425649e-07];
let I_x=[-866.02540378444, -878.10724024191, -684.6294431297246, -90.4772479577493, 526.6050554724458, 654.700539122706];
let I_y=[-500.0, -146.8241274076041, 567.171819825591, 988.513077229562, 845.0839108784087, 443.375674638776];
let I_z=[0.0, -365.6313122016407, -296.2058945114107, -22.1523036488251, -9.3808869538047, -255.70322699390857];
let J_x=[-1000.0, -879.4780728504026, -356.6833165034716, 420.1933814772697, 720.9774819672788, 309.401079447253];
let J_y=[0.0, 353.6214542898399, 910.017357669437, 912.8357445232239, 432.5009079706407, 154.700538425212];
let J_z=[0.0, -233.3379525474487, -89.1854422789467, 15.7639458758987, -254.2151532672607, -511.40645597440056];
let K_x=[-866.02540378444, -607.5917994309826, 143.5975569322174, 756.8668152531937, 468.1585782762828, -190.598921187331];
let K_y=[500.0, 774.3114270271359, 992.6260533141359, 556.0619636351429, 81.5434685866587, 288.675132272446];
let K_z=[0.0, -102.7738166007217, 14.9492950060793, -149.5014790969863, -538.5752596616647, -511.4064576771588];
let L_x=[-500.0, -144.67246830414857, 614.5543823084204, 730.3506970590149, -38.1065077332682, -345.29946270135];
let L_y=[866.02540378444, 988.0204174477549, 781.6990722569699, 118.6794045283579, 61.1641907951478, 711.324862481922];
let L_z=[0.0, -13.4242071242246, -25.7774741365701, -425.0783012287403, -644.5447843164537, -255.7032303994168];
let M_x=[0.0, 369.28351331043444, 866.3486291443634, 355.5456587180379, -409.8467718486152, -3.75246e-06];
let M_y=[1000.0, 930.1183942747538, 362.2592148165329, -153.5264663328391, 386.9805230206508, 999.999999313184];
let M_z=[0.0, 7.6897007612033, -194.9491493123991, -656.1071728747783, -490.9150797613347, -1.135145813970381e-06];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 742.127200363579, 612.383847884031, 426.424877797094, 220.964854838875, 32.692071227261];
let D_E_y=[-211.324865405191, -198.562421701905, -159.631190811607, -93.168783315958, 1.404753885557, 122.008467323674];
let D_E_z=[0.0, -193.5838984343256, -349.71079858218, -440.786108137154, -456.007529001273, -403.333556169743];
let F_G_x=[211.324865405187, 98.748300282411, -157.0186893467798, -372.5129925606515, -397.328785901607, -211.3248666141387];
let F_G_y=[-788.67513459481, -671.418233134738, -353.7329895571865, 72.561634419535, 488.0788713216797, 788.67513358412];
let F_G_z=[0.0, -364.2814062989736, -542.0929549615703, -470.759006097153, -237.998483536811, -8.95251801024431e-07];
let H_I_x=[-577.35026918963, -633.344279273403, -615.3143458390588, -275.9143660605565, 254.6517619983518, 577.350268648];
let H_I_y=[-577.35026918962, -312.4581361506401, 276.469604160292, 754.350145757767, 831.3541935987113, 577.350270669381];
let H_I_z=[0.0, -321.21436090286, -298.2150166834967, -32.0110171192221, 113.78281918174, 8.95293029222379e-07];
let J_K_x=[-788.67513459481, -635.506562457427, -98.0284347254466, 529.5920887460057, 561.2451612529921, 32.692072977877];
let J_K_y=[211.32486540519, 476.9198368545679, 817.257105568718, 634.980484641843, 180.5662828990587, 122.008466854564];
let J_K_z=[0.0, -112.5413944403177, 28.3287493731553, 27.7961892752722, -272.4065766946167, -403.33355616971454];
let last_x=[-211.324865405191, 94.67936910857043, 644.8354405584014, 487.7668825745757, -237.3122084454712, -211.3248678230472];
let last_y=[788.67513459481, 814.0137704227836, 484.5513752188649, -54.9250127040781, 148.4210235887272, 788.675132573405];
let last_z=[0.0, 28.3942361194143, -35.911630897239, -406.8849852966773, -439.557634934764, -1.790533813970381e-06];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 5, 4, 3, 2, 1];
let t=steparray[sec%10];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=2000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
