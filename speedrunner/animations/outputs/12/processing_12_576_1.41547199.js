

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 944.5849274526746, 1147.0888677576565, 1377.589930060282, 1499.999999914293];
let E_y=[-500.0, -439.223132531494, -265.738980465307, -7.518991007949, 288.6751335096779];
let E_z=[0.0, 230.3366941677387, 347.432212516945, 271.9617165361357, 1.264882e-06];
let F_x=[500.0, 587.3034106654026, 828.0444560823036, 1133.778218108108, 1345.299461215167];
let F_y=[-866.02540378444, -778.026065978808, -524.04001797077, -148.328295177557, 258.3302477881796];
let F_z=[0.0, 390.0604634721227, 662.773979229599, 706.3322742461917, 493.047791715136];
let G_x=[0.0, 144.6721482644406, 528.5750146946806, 968.861522513843, 1182.335127847189];
let G_y=[-1000.0, -853.5365331506714, -439.5989915892072, 138.84703166346, 683.1942556409936];
let G_z=[0.0, 647.5967275669917, 1076.461009688293, 1104.1789879427447, 739.791369771986];
let H_x=[-500.0, -366.0233364928234, 32.35027222570957, 626.998761528493, 1159.2619993907097];
let H_y=[-866.02540378444, -771.3213146360478, -478.1201362855224, 27.559488597835, 689.3766806109204];
let H_z=[0.0, 667.0896012460665, 1218.680272813974, 1476.5955931592857, 1256.87801705254];
let I_x=[-866.02540378444, -780.5389430125824, -424.45776360583443, 351.531706584868, 1299.1532042766516];
let I_y=[-500.0, -557.8215383146478, -621.2697913129894, -402.975195261554, 270.69509773488835];
let I_z=[0.0, 442.2700071414035, 1021.744275351948, 1558.4917473174703, 1527.221086849244];
let J_x=[-1000.0, -965.5628543570604, -624.4369774192794, 338.5409162326898, 1462.1175377740626];
let J_y=[0.0, -281.7005853705788, -800.9176549380034, -846.297573054695, -154.16891057500965];
let J_z=[0.0, 45.4418780890755, 579.382261195387, 1291.5728436313852, 1280.477509664944];
let K_x=[-866.02540378444, -861.5897746813914, -472.40974426721345, 597.2733816549008, 1485.190666566115];
let K_y=[500.0, -31.7613509242958, -931.5625560105774, -986.845773061377, -160.3513364797074];
let K_z=[0.0, -395.7714152490605, 102.130940992937, 865.8347701137083, 763.390862410535];
let L_x=[-500.0, -502.0583488668884, -40.73153901533543, 943.5604139848128, 1345.29946188633];
let L_y=[866.02540378444, 111.6135378227222, -951.0256752501305, -724.576000330812, 258.3302459186566];
let L_z=[0.0, -739.4718481258506, -182.867842392365, 584.3226922500382, 493.047791767396];
let M_x=[0.0, -2.5970040890384, 465.14575394317757, 1130.9109955155468, 1182.335128259455];
let M_y=[1000.0, 102.31347219496872, -850.0437826040395, -246.174838992817, 683.1942546856745];
let M_z=[0.0, -875.1223781032525, -139.9724550213877, 647.4200841269723, 739.791368079113];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 317.1631761960716, 598.3608902283136, 928.89822963876, 1122.008467657764];
let F_G_y=[-788.67513459481, -681.790604254987, -382.648515873859, 32.1187640935614, 431.4095434265379];
let F_G_z=[0.0, 474.1995572674437, 791.499657275652, 827.9030215592167, 590.521311680913];
let H_I_x=[-577.35026918963, -488.3824841597064, -184.35934088366943, 389.66091157262, 1085.614062275889];
let H_I_y=[-577.35026918962, -552.1084071994644, -443.40985383008194, -143.420671918456, 441.1613931170956];
let H_I_z=[0.0, 504.9466468124187, 1015.8292502508966, 1415.3344540482246, 1406.148073963262];
let J_K_x=[-788.67513459481, -780.2300005254458, -499.7966076246377, 369.1698849136179, 1342.6658975863554];
let J_K_y=[211.32486540519, -116.5689477442338, -726.7774598783544, -842.695343868272, -228.99796475952266];
let J_K_z=[0.0, -120.9903093702905, 318.06940814179, 994.3098494671913, 1016.947026070807];
let last_x=[-211.324865405191, -213.1230092348104, 181.11112563270757, 915.3858285760878, 1122.008468227408];
let last_y=[788.67513459481, 109.5834716158942, -757.4776162501093, -429.004047251416, 431.4095419412816];
let last_z=[0.0, -663.1262796891006, -131.473499549741, 550.2666976687923, 590.521310818317];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
