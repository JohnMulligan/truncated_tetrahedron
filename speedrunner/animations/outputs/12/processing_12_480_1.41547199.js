

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 778.6895587085387, 544.3622538224527, 238.4879150795, -39.60071698804];
let E_y=[-500.0, -483.674662614548, -427.239089925989, -312.740456018712, -123.859635250677];
let E_z=[0.0, -234.57696515752943, -381.8673935677309, -386.431814788531, -249.583673615407];
let F_x=[500.0, 421.5078534930607, 230.5958275927847, 38.034456062185, -43.30305080305794];
let F_y=[-866.02540378444, -822.450851631807, -684.12589549362, -441.931951329194, -113.744673914924];
let F_z=[0.0, -74.57347880355545, -60.1392609348389, 72.999530178877, 267.942338013596];
let G_x=[0.0, -17.8018238482623, -19.6425084257483, 85.6697745913674, 301.99640993555204];
let G_y=[-1000.0, -898.8513348379863, -612.8763040381981, -211.709765022172, 174.930460765055];
let G_z=[0.0, 188.33176266425355, 387.3576254624131, 534.169578850471, 523.645567289743];
let H_x=[-500.0, -397.9536679957293, -87.2549238193306, 347.4865133396574, 650.9982048718041];
let H_y=[-866.02540378444, -688.3050536988573, -247.4006743609871, 214.051352468541, 453.490634429157];
let H_z=[0.0, 469.5861516449286, 747.6426762594341, 668.812285951111, 261.822785220238];
let I_x=[-866.02540378444, -710.7687076468343, -271.4972597610296, 258.8966898506661, 500.08860518793705];
let I_y=[-500.0, -282.3525858175093, 234.3852727937399, 710.635233341862, 865.783329975069];
let I_z=[0.0, 542.3772034318368, 791.0737158749816, 552.599184873374, -12.385563219165];
let J_x=[-1000.0, -855.6429109015833, -484.6816630219806, -117.0404597172199, 0.17721040059606];
let J_y=[0.0, 188.4482315800437, 603.1814951425469, 924.567866891289, 999.515852313755];
let J_z=[0.0, 383.2946839640759, 496.9802800103746, 268.252072511576, -24.7711298929004];
let K_x=[-866.02540378444, -785.983476525164, -625.3456626218706, -512.7286295845529, -348.82458525683495];
let K_y=[500.0, 572.6837691976267, 683.4640076502262, 703.569590175013, 720.955679254714];
let K_z=[0.0, 43.50091229483386, 5.3324895819656, 18.172432503423, 237.0516518590406];
let L_x=[-500.0, -524.1934832377109, -626.541973679342, -646.5125148184209, -197.91498651366695];
let L_y=[866.02540378444, 746.7805430790137, 437.0233448449272, 204.949470681791, 308.662983548322];
let L_z=[0.0, -367.7234852909111, -449.8759912123454, -19.6302250673602, 511.2600005748496];
let M_x=[0.0, -154.4668651453229, -487.7012267935301, -423.1632360634599, 301.99640805416607];
let M_y=[1000.0, 654.7475196320111, -18.8501182938678, -216.369063251825, 174.9304604441];
let M_z=[0.0, -718.1251732153471, -651.9943353603774, 181.7524580878528, 523.6455678425834];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 153.2853370520497, 29.3358536761477, -44.128569836188, 26.8521939863162];
let F_G_y=[-788.67513459481, -725.701538910987, -535.118314891101, -228.6029810395841, 137.963304310403];
let F_G_z=[0.0, 14.93992599784956, 102.9789823707501, 265.499881055022, 412.986237586458];
let H_I_x=[-577.35026918963, -446.3472766468873, -77.3126079454831, 368.8481335067784, 577.3502691766811];
let H_I_y=[-577.35026918962, -393.5963056793163, 41.3647679624999, 442.971432244867, 577.350269224985];
let H_I_z=[0.0, 458.57661216728155, 671.2747042304321, 477.8785913446479, 1.809144e-06];
let J_K_x=[-788.67513459481, -674.8646401494237, -413.5790838161716, -224.1364305625219, -211.18510396209194];
let J_K_y=[211.32486540519, 349.0214903774187, 623.0855885605049, 780.4181293624968, 788.2932993353174];
let J_K_z=[0.0, 207.64775726144387, 207.3863440024996, 29.363597117447, -19.53637511773642];
let last_x=[-211.324865405191, -261.9301237662759, -415.4660853847096, -435.1604779494155, 26.85219223874606];
let last_y=[788.67513459481, 623.6330835242748, 234.3623427453082, -6.080450343494, 137.963304777916];
let last_z=[0.0, -440.9971569677791, -510.6368757158084, -30.264434977912, 412.9862375431916];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
