

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 944.5849274526746, 1147.0888677576565, 1377.589930060282, 1499.999999914293];
let E_y=[-500.0, -439.223132531494, -265.738980465307, -7.518991007949, 288.6751335096779];
let E_z=[0.0, 230.3366941677387, 347.432212516945, 271.9617165361357, 1.264882e-06];
let F_x=[500.0, 781.8408767687436, 1388.3395361981766, 1862.207650961358, 1964.101615417866];
let F_y=[-866.02540378444, -728.890369597455, -414.706831624192, -110.192412579166, 92.5227112988539];
let F_z=[0.0, 627.2705150606897, 780.509442037541, 422.1383642635037, -118.672279318785];
let G_x=[0.0, 455.0054663534636, 1451.2015686506209, 2225.62395546756, 2309.401077695183];
let G_y=[-1000.0, -775.1534638115244, -259.562249287091, 204.643033905517, 381.1978463911249];
let G_z=[0.0, 1026.0029228776878, 1270.333610365844, 613.8580129356477, -374.375506051606];
let H_x=[-500.0, 309.8377220563466, 1830.6791213367328, 2737.449867852388, 2809.401077615623];
let H_y=[-866.02540378444, -600.6143324076954, -127.203217415522, 138.0491420775891, 247.2232498786509];
let H_z=[0.0, 1491.2035355767837, 1596.56522459184, 653.2113026808646, -374.3755060516244];
let I_x=[-866.02540378444, 393.0248504593003, 2346.1645626092677, 3033.361927362323, 2964.101615812807];
let I_y=[-500.0, -261.4062749969384, -80.62437457041, -262.5718043005669, -175.4264818745491];
let I_z=[0.0, 1873.2597983010166, 1603.9383966629832, 512.1861177287396, -118.67227931880643];
let J_x=[-1000.0, 677.8131490266034, 2752.3189941912087, 2902.726590460975, 2618.80215426096];
let J_y=[0.0, 133.3784529251356, -141.9943429313138, -712.0532943058029, -464.1016175836251];
let J_z=[0.0, 2049.2991008154, 1288.943956837668, 291.1657762973196, 137.03094769733656];
let K_x=[-866.02540378444, 1072.6122290552114, 2855.8382550015667, 2438.531564267052, 2118.802154129309];
let K_y=[500.0, 456.7736562363456, -282.1048476965348, -890.4493306353849, -330.1270218593721];
let K_z=[0.0, 1962.7056754587484, 801.4995994728251, 147.4750517886006, 137.03094826402892];
let L_x=[-500.0, 1450.4512796608662, 2607.45363759642, 1971.196107195083, 1964.101614995445];
let L_y=[866.02540378444, 604.7726305706816, -434.2720329820358, -670.775601304242, 92.5227097224099];
let L_z=[0.0, 1641.3287194327784, 373.5984169669691, 183.3946235595033, -118.6722781854181];
let M_x=[0.0, 1689.8139826301383, 2125.380718021342, 1833.374871800587, 2309.401075821819];
let M_y=[1000.0, 529.7776211919937, -526.0738154411026, -209.3983460239629, 381.1978460482969];
let M_z=[0.0, 1188.5258512587113, 208.89466661254414, 373.3565350457093, -374.37550548490407];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 624.0169007216446, 1482.1424856746976, 2077.886591635476, 2098.076212164507];
let F_G_y=[-788.67513459481, -604.28640034104, -210.1917849587252, 92.2724087759167, 169.8729811114309];
let F_G_z=[0.0, 848.3628959951557, 977.209721228925, 379.6296811459737, -374.375507033136];
let H_I_x=[-577.35026918963, 395.0365201769412, 2080.711505555557, 2885.215332313915, 2886.751346633832];
let H_I_y=[-577.35026918962, -328.9770544370984, -1.41523040643, -12.769484425239, -41.4518847620891];
let H_I_z=[0.0, 1582.1472076632447, 1491.791245746471, 441.7036033190997, -374.37550703316265];
let J_K_x=[-788.67513459481, 844.2474195841384, 2721.359307543895, 2679.157648486912, 2342.093148004002];
let J_K_y=[211.32486540519, 293.7367424227506, -98.2171665206598, -721.7592336807699, -496.7936877811481];
let J_K_z=[0.0, 1859.822848872265, 994.9346812947841, 93.0771082658586, 28.958046933421567];
let last_x=[-211.324865405191, 1440.2319477673323, 2329.569764417323, 1942.00593947258, 2098.076210957434];
let last_y=[788.67513459481, 527.18296442882, -338.2381171925755, -375.2568175864029, 169.8729801023109];
let last_z=[0.0, 1352.8988207733564, 319.9846358826251, 149.7348544678761, -374.3755061392821];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
