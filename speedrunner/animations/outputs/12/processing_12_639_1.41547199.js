function p_12_639_1_41547199(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 944.5849274526746, 1147.0888677576565, 1377.589930060282, 1499.999999914293];
let E_y=[-500.0, -439.223132531494, -265.738980465307, -7.518991007949, 288.6751335096779];
let E_z=[0.0, 230.3366941677387, 347.432212516945, 271.9617165361357, 1.264882e-06];
let F_x=[500.0, 587.3034106654026, 828.0444560823036, 1133.778218108108, 1345.299461215167];
let F_y=[-866.02540378444, -778.026065978808, -524.04001797077, -148.328295177557, 258.3302477881796];
let F_z=[0.0, 390.0604634721227, 662.773979229599, 706.3322742461917, 493.047791715136];
let G_x=[0.0, 144.6721482644406, 528.5750146946806, 968.861522513843, 1182.335127847189];
let G_y=[-1000.0, -853.5365331506714, -439.5989915892072, 138.84703166346, 683.1942556409936];
let G_z=[0.0, 647.5967275669917, 1076.461009688293, 1104.1789879427447, 739.791369771986];
let H_x=[-500.0, -240.9548038448914, 391.2093076202096, 1000.229408403236, 1174.0713329977607];
let H_y=[-866.02540378444, -641.4697123945714, -52.6045598610052, 649.592350892651, 1138.4031496860975];
let H_z=[0.0, 920.1195885757508, 1391.604095860938, 1182.3100768345826, 493.487157652011];
let I_x=[-866.02540378444, -445.5564707287034, 481.3248383466742, 1205.553860591375, 1328.7718715071646];
let I_y=[-500.0, -210.0281339471584, 452.7580802756758, 1020.35338015993, 1168.748036382816];
let I_z=[0.0, 1119.9833289747687, 1458.2147970064084, 885.1109500837995, 0.439367202252];
let J_x=[-1000.0, -403.3311804311995, 756.0322384148951, 1438.682616778848, 1491.7362050373897];
let J_y=[0.0, 302.0328457690736, 835.9678521141288, 987.218234531977, 743.88402906804];
let J_z=[0.0, 1182.910035089627, 1244.5905765949524, 424.1313002142865, -246.304211673867];
let K_x=[-866.02540378444, -127.8589528159165, 1084.5879300529891, 1533.6719972882643, 1500.0000002388065];
let K_y=[500.0, 730.0299711294276, 914.6408206207308, 573.772884620381, 288.675134585757];
let K_z=[0.0, 1088.661932047355, 852.4032311212724, 127.5016444850805, -3.73662e-07];
let L_x=[-500.0, 292.2659526931895, 1310.6199094073831, 1422.907489050545, 1345.2994619191434];
let L_y=[866.02540378444, 936.3156517211046, 651.3335628154948, 74.312396515858, 258.3302469138165];
let L_z=[0.0, 867.550027833856, 468.3094603733724, 206.3663195200122, 493.047790075599];
let M_x=[0.0, 721.9277199161585, 1326.5510611025475, 1185.2325190852753, 1182.3351282266244];
let M_y=[1000.0, 854.546622163039, 171.3639002430898, -155.641617583374, 683.1942536905285];
let M_z=[0.0, 590.685830034481, 275.1139276948664, 604.5885595855142, 739.791369771048];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 317.1631761960716, 598.3608902283136, 928.89822963876, 1122.008467657764];
let F_G_y=[-788.67513459481, -681.790604254987, -382.648515873859, 32.1187640935614, 431.4095434265379];
let F_G_z=[0.0, 474.1995572674437, 791.499657275652, 827.9030215592167, 590.521311680913];
let H_I_x=[-577.35026918963, -291.1056005203424, 381.6870551969766, 978.3763728902964, 1108.9735686274898];
let H_I_y=[-577.35026918962, -347.2869474491754, 227.7772551875058, 837.743030867068, 1149.4334149860997];
let H_I_z=[0.0, 904.0635654399327, 1288.590689083324, 951.1431156548477, 202.013296390928];
let J_K_x=[-788.67513459481, -224.5015275029684, 814.9968466429601, 1346.102079218465, 1366.025403989715];
let J_K_y=[211.32486540519, 460.4125767477306, 832.2332919529968, 785.477299991195, 479.274058679158];
let J_K_z=[0.0, 1003.3210222694318, 951.6304675118994, 224.0167408422345, -187.18775417014];
let last_x=[-211.324865405191, 438.1826052950815, 1171.528450123077, 1171.3876523330412, 1122.0084682274176];
let last_y=[788.67513459481, 785.7973505589722, 416.9055179743098, -2.346835370068, 431.409541941299];
let last_z=[0.0, 654.55010063723, 345.7800548286484, 348.4139572381425, 590.521310818369];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}