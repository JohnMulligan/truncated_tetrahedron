function p_12_896_1_41547199(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 1015.1336890550068, 1338.909022924656, 1567.861492642365, 1500.000000850972];
let E_y=[-500.0, -364.58932583705, -18.188502386583, 397.281664437578, 741.6697497844061];
let E_z=[0.0, 377.4032917298177, 470.608682490503, 207.0786213314357, -237.344560772815];
let F_x=[500.0, 776.2606013973108, 1312.210499339639, 1569.1554602590547, 1345.299463088523];
let F_y=[-866.02540378444, -578.127525929253, 100.792838480058, 777.93199615074, 1164.319480839613];
let F_z=[0.0, 783.9623618849178, 973.67907696337, 557.8675080504858, 18.35866737673];
let G_x=[0.0, 329.1903813522788, 963.9067082129561, 1294.2239404913498, 1182.33512876144];
let G_y=[-1000.0, -658.3339834942528, 122.2114644572203, 831.0519952813135, 1125.3476898585768];
let G_z=[0.0, 1032.2451340316927, 1356.007344266675, 993.2295614746607, 508.126997994568];
let H_x=[-500.0, -182.2953078675122, 459.7685162635281, 938.7662919068907, 1174.0713320162295];
let H_y=[-866.02540378444, -579.4136056092061, 35.8734463296112, 518.8302469513364, 663.7261677791588];
let H_z=[0.0, 1042.4017136217947, 1435.6290905102933, 1203.2691586074277, 742.192101005583];
let I_x=[-866.02540378444, -593.6982290543542, 39.7342392795081, 755.8012803594528, 1328.7718695889496];
let I_y=[-500.0, -366.7478708090541, -117.1297076837118, 63.5097152657054, 241.0764361692438];
let I_z=[0.0, 811.1656565027457, 1174.6493337252082, 1038.4777437640428, 486.488873658144];
let J_x=[-1000.0, -772.7076318907822, -96.2860214965839, 875.5654659582708, 1491.7362040783155];
let J_y=[0.0, -88.7319252854081, -263.9780452949278, -210.8073067069886, 280.048226170392];
let J_z=[0.0, 412.9044857091847, 697.2781502313222, 616.1557058178777, -3.279456983675];
let K_x=[-866.02540378444, -661.7525386723892, 116.4448889551361, 1212.8093497704338, 1500.0000011755283];
let K_y=[500.0, 165.2218897796599, -334.7809226976488, -108.8588668646886, 741.669747824664];
let K_z=[0.0, -24.2975494346473, 230.7144303376802, 236.9166375823907, -237.344560820749];
let L_x=[-500.0, -296.5170704377932, 576.6803339288131, 1527.4789292623307, 1345.2994637925344];
let L_y=[866.02540378444, 313.4398232122199, -295.8405891000679, 296.7869847525204, 1164.319479989261];
let L_z=[0.0, -359.8324796335123, -2.9866138198418, 170.7071878091354, 18.358665724652];
let M_x=[0.0, 205.5358760857128, 1065.3769651988562, 1595.5888464824773, 1182.3351291408912];
let M_y=[1000.0, 308.25370112959104, -165.6902130040239, 717.3869529626834, 1125.3476909679598];
let M_z=[0.0, -485.7893589848733, 107.4021293494372, 464.6559900672784, 508.126996390438];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 503.9347437579308, 1059.492755504076, 1315.515739286603, 1122.00846913523];
let F_G_y=[-788.67513459481, -484.204243377333, 212.457945211866, 854.643261124759, 1145.940724140712];
let F_G_z=[0.0, 863.5452855098277, 1087.613458807813, 696.0654503222377, 216.145802445202];
let H_I_x=[-577.35026918963, -302.8573458195362, 264.2902427238741, 754.8345216063938, 1108.9735671146466];
let H_I_y=[-577.35026918962, -359.7191640758158, 76.2726490769843, 362.1602023496134, 417.8018920250138];
let H_I_z=[0.0, 879.5657690603267, 1213.204841678531, 1027.371465400104, 585.3484556875293];
let J_K_x=[-788.67513459481, -585.2178755710498, 49.7386477734626, 943.7445919999677, 1366.0254039897354];
let J_K_y=[211.32486540519, 78.8093624349229, -155.3586157841128, -70.5338261023226, 479.2740554741298];
let J_K_z=[0.0, 251.3684041013187, 460.2232768910792, 361.2216851610047, -187.18775249089];
let last_x=[-211.324865405191, -9.1136114336072, 775.6911507932921, 1440.0887379172698, 1122.0084697049103];
let last_y=[788.67513459481, 312.6009596334879, -93.9360701016058, 569.3117671417244, 1145.940724276914];
let last_z=[0.0, -277.8877083703693, 91.5948719793122, 256.7861917382726, 216.145800733134];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}