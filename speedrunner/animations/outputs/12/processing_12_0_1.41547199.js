function p_12_0_1_41547199(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 736.5965305090687, 415.0380612968827, 57.124879582456, -190.598922641515];
let E_y=[-500.0, -439.223132531495, -265.73898046531, -7.5189910079545, 288.675133509671];
let E_z=[0.0, -403.1834758090653, -647.275799147211, -666.117282540939, -511.4064571084297];
let F_x=[500.0, 308.7662521194637, -95.8265055454773, -376.958394951818, -345.299462277335];
let F_y=[-866.02540378444, -703.392259284371, -276.4895398920508, 256.4723602679705, 711.324864062906];
let F_z=[0.0, -526.1676934746553, -730.0466409219987, -566.9736006835493, -255.70322926257873];
let G_x=[0.0, -207.0263490277303, -517.1305163503613, -448.9193325965619, -1.873382e-06];
let G_y=[-1000.0, -699.0244268377659, 8.3869427384282, 687.9667871898826, 999.999999657151];
let G_z=[0.0, -569.6200475265912, -633.62303097646, -290.2365857763563, -5.66676735493118e-07];
let H_x=[-500.0, -644.8978954661633, -648.3595558214033, -107.5353258060929, 499.999998549027];
let H_y=[-866.02540378444, -427.5243680180798, 453.3070410134062, 979.8216869544665, 866.025405018047];
let H_z=[0.0, -519.5658837473146, -403.896589786907, -32.8907682035633, 5.66722629978512e-07];
let I_x=[-866.02540378444, -864.0250972570853, -427.0567912567823, 404.1926366257731, 654.700539121534];
let I_y=[-500.0, 23.79114171269718, 846.5165558955222, 924.2914481200038, 443.375674636237];
let I_z=[0.0, -392.1030556645756, -150.20276598873, 21.882194756658, -255.70322699578838];
let J_x=[-1000.0, -793.9347443409137, 41.4514730546617, 722.0108158274701, 309.401079443047];
let J_y=[0.0, 509.7751171311022, 1000.8722987525792, 560.9031213869488, 154.700538425211];
let J_z=[0.0, -228.2247151319496, 6.716013480315, -164.905710082457, -511.4064559750304];
let K_x=[-866.02540378444, -457.1685025804037, 534.1845431943797, 619.6926450399301, -190.598921190551];
let K_y=[500.0, 874.1308935358352, 842.9105694230332, 148.3206188185778, 288.675132276125];
let K_z=[0.0, -80.6355588834856, -7.8237970079029, -460.296744022619, -511.4064576751006];
let L_x=[-500.0, 37.9666816362523, 816.6322295548647, 170.0693529627731, -345.299462699708];
let L_y=[866.02540378444, 999.6784907275352, 447.8112925774632, -19.7751779711162, 711.324862486534];
let L_z=[0.0, 3.1984593981567, -186.9021550996629, -654.028235408123, -255.7032303959466];
let M_x=[0.0, 532.2310354282383, 754.3670611652395, -306.8121267861349, -3.746662e-06];
let M_y=[1000.0, 846.0407117308822, 3.6170656014512, 176.2682162529028, 999.999999314346];
let M_z=[0.0, -3.68440822249565, -445.2889387355729, -608.1999222736727, -1.133387618155498e-06];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 41.8477911379777, -281.5569514760503, -412.644622232583, -211.3248666122788];
let F_G_y=[-788.67513459481, -608.020069164814, -146.875240783454, 391.5840878642145, 788.675133585678];
let F_G_z=[0.0, -431.4308051147665, -535.057583798116, -302.799961337256, -8.93868735493118e-07];
let H_I_x=[-577.35026918963, -648.8290105071703, -488.5511122111876, 125.8375327753951, 577.350268648819];
let H_I_y=[-577.35026918962, -179.76937830058583, 554.9195959984582, 851.9414925722054, 577.350270667106];
let H_I_z=[0.0, -352.4778564034732, -172.698519947801, 103.1245332860067, 8.93903401343022e-07];
let J_K_x=[-788.67513459481, -538.2719734672453, 250.4505246180197, 627.148123292545, 32.69207297394];
let J_K_y=[211.32486540519, 586.7975761474902, 798.3926685449954, 278.7508175794408, 122.008466856299];
let J_K_z=[0.0, -93.9843118499796, 74.817359088602, -191.505418693345, -403.3335561691584];
let last_x=[-211.324865405191, 242.7296426421473, 695.9694587307287, -82.0652974992939, -211.3248678193009];
let last_y=[788.67513459481, 784.8301123739471, 175.1827178560182, 13.6048672635718, 788.675132576595];
let last_z=[0.0, 38.2512994538364, -207.6519372534659, -497.0878387807912, -1.787726618155498e-06];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}