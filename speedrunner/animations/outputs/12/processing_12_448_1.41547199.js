

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 778.6895587085387, 544.3622538224527, 238.4879150795, -39.60071698804];
let E_y=[-500.0, -483.674662614548, -427.239089925989, -312.740456018712, -123.859635250677];
let E_z=[0.0, -234.57696515752943, -381.8673935677309, -386.431814788531, -249.583673615407];
let F_x=[500.0, 421.5078534930607, 230.5958275927847, 38.034456062185, -43.30305080305794];
let F_y=[-866.02540378444, -822.450851631807, -684.12589549362, -441.931951329194, -113.744673914924];
let F_z=[0.0, -74.57347880355545, -60.1392609348389, 72.999530178877, 267.942338013596];
let G_x=[0.0, -17.8018238482623, -19.6425084257483, 85.6697745913674, 301.99640993555204];
let G_y=[-1000.0, -898.8513348379863, -612.8763040381981, -211.709765022172, 174.930460765055];
let G_z=[0.0, 188.33176266425355, 387.3576254624131, 534.169578850471, 523.645567289743];
let H_x=[-500.0, -527.5901999425383, -502.1499984010203, -199.6666944920036, 393.42978803979946];
let H_y=[-866.02540378444, -813.5964981321775, -618.4874433948577, -262.2357087673754, 85.3838605948992];
let H_z=[0.0, 216.55616431524626, 574.7188532124571, 963.097802275803, 1025.213644620754];
let I_x=[-866.02540378444, -943.9049082154463, -987.2831906989622, -614.8692322701966, 139.56370550676246];
let I_y=[-500.0, -594.1050369874225, -698.2887614245443, -557.5448455858924, -292.8378743544668];
let I_z=[0.0, 1.02251359845326, 412.7721712376471, 1054.4682502618623, 1271.07849323142];
let J_x=[-1000.0, -1132.8555249896663, -1244.1489632516252, -864.3919864979237, -205.73575541182055];
let J_y=[0.0, -310.9673104331745, -814.2998111952783, -887.4327991175004, -581.5130095527968];
let J_z=[0.0, -388.95169664300573, -21.4059070357089, 743.2424067519524, 1015.375264783514];
let K_x=[-866.02540378444, -1033.673891871418, -1150.4952394774155, -770.6218446748383, -297.16913418000183];
let K_y=[500.0, -55.2428688865795, -911.306573338341, -1017.0816010191464, -491.9664101216422];
let K_z=[0.0, -827.9473755269858, -521.1737136748179, 250.9543395605234, 513.807187441595];
let L_x=[-500.0, -678.2576829407549, -750.8953469053974, -400.3054520130833, -43.30305213092284];
let L_y=[866.02540378444, 90.8250876334005, -943.1398833263349, -854.2057709186583, -113.7446753929472];
let L_z=[0.0, -1174.7797023630837, -848.6729635407759, -71.9797492659546, 267.942337991771];
let M_x=[0.0, -180.9118359043239, -235.5338951207064, -17.0381960921463, 301.9964089676782];
let M_y=[1000.0, 80.2598364804006, -894.6490723417209, -514.7421628506904, 174.9304603237128];
let M_z=[0.0, -1317.9043904319567, -848.0344531303407, 4.30826923915, 523.645565611437];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 153.2853370520497, 29.3358536761477, -44.128569836188, 26.8521939863162];
let F_G_y=[-788.67513459481, -725.701538910987, -535.118314891101, -228.6029810395841, 137.963304310403];
let F_G_z=[0.0, 14.93992599784956, 102.9789823707501, 265.499881055022, 412.986237586458];
let H_I_x=[-577.35026918963, -650.8294952099943, -731.7474655223623, -494.2041261544526, 171.07465755197006];
let H_I_y=[-577.35026918962, -591.2247992833683, -543.9690470657908, -308.3000920071414, -3.283049573008];
let H_I_z=[0.0, 59.45969353976556, 398.5132653979818, 942.069929738005, 1204.134779381458];
let J_K_x=[-788.67513459481, -948.8708014423781, -1136.9147610039083, -887.7889097045016, -373.58354007898856];
let J_K_y=[211.32486540519, -144.6174300852895, -726.9591076506298, -828.6489443126324, -458.6248517864458];
let J_K_z=[0.0, -555.6662319616257, -286.3376432427249, 451.1577616988544, 800.801223156496];
let last_x=[-211.324865405191, -388.2549486112069, -506.6057628872984, -303.6702480541553, 26.85219277925216];
let last_y=[788.67513459481, 85.7829004515005, -777.1713877293829, -571.7367098591563, 137.9633033012418];
let last_z=[0.0, -1102.7422960602148, -802.9186731781949, -58.2224102420996, 412.986236692556];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
