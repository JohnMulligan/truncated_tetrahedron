

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 1015.1336890550068, 1338.909022924656, 1567.861492642365, 1500.000000850972];
let E_y=[-500.0, -364.58932583705, -18.188502386583, 397.281664437578, 741.6697497844061];
let E_z=[0.0, 377.4032917298177, 470.608682490503, 207.0786213314357, -237.344560772815];
let F_x=[500.0, 741.5524299949489, 1367.6065364241497, 1976.282202092222, 1964.101616789262];
let F_y=[-866.02540378444, -771.511672654253, -441.463477721143, 132.499939555736, 755.7528591295062];
let F_z=[0.0, 543.2848482182117, 767.195837312831, 383.2386471380757, -466.168835153334];
let G_x=[0.0, 310.1070839774258, 1210.7832520696556, 2139.121300540514, 2082.903771238443];
let G_y=[-1000.0, -1053.508250901481, -934.774217714792, -345.057026141042, 409.3640648000102];
let G_z=[0.0, 495.5141910341088, 766.7912111835315, 267.6014344331717, -832.024057464445];
let H_x=[-500.0, -140.4457808918242, 943.0772657746926, 1940.468079957166, 1737.604309880987];
let H_y=[-866.02540378444, -1119.8865133619386, -1263.335597962311, -695.458794901101, 48.8921607415832];
let H_z=[0.0, 249.4547781640258, 469.5873808871955, -57.5211437320573, -969.055005800454];
let I_x=[-866.02540378444, -465.2044525963342, 691.8999193176626, 1521.726144695729, 1273.502693691713];
let I_y=[-500.0, -949.2986346833586, -1270.772907187028, -669.2854331888519, 34.8090506132137];
let I_z=[0.0, -115.7585474852252, 17.03482096800347, -360.7031669809773, -740.230731977203];
let J_x=[-1000.0, -559.7237235003093, 576.7959534768656, 1180.960730074668, 1154.700538345616];
let J_y=[0.0, -596.6071573044806, -953.5464503651172, -285.1674352560049, 381.1978445276567];
let J_z=[0.0, -482.6700104339882, -375.47969414075556, -426.1362495410976, -374.37550956437];
let K_x=[-866.02540378444, -393.6053756798593, 652.5476722820339, 1160.7325040003705, 1499.999999057161];
let K_y=[500.0, -175.2407216150106, -462.63622264229116, 183.4756729251191, 741.6697489543097];
let K_z=[0.0, -733.2776995077352, -521.1437523236235, -207.2443847874536, -237.344560569391];
let L_x=[-500.0, -20.2745116554483, 883.101985294063, 1475.4401460823915, 1964.101615497409];
let L_y=[866.02540378444, 179.2855693229514, -31.68485440033018, 403.0584379817531, 755.7528598659587];
let L_z=[0.0, -786.9840066947755, -350.6303528705265, 140.1627275985744, -466.168833835421];
let M_x=[0.0, 440.2024222938447, 1158.729428558044, 1901.0712049880415, 2082.903771740383];
let M_y=[1000.0, 352.9529831534294, 134.2016990219468, 217.2793695994651, 409.3640663665377];
let M_z=[0.0, -626.5165174478215, 54.90676792676647, 368.7967842851764, -832.02405634995];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 449.1878002533338, 1146.871709511367, 1957.697215111445, 2098.076212850209];
let F_G_y=[-788.67513459481, -789.238779271018, -642.870201117858, -163.429167088987, 501.4880534043801];
let F_G_z=[0.0, 483.9125445397577, 761.917065161894, 420.6145695537737, -548.123784100367];
let H_I_x=[-577.35026918963, -261.4918824323242, 724.6055999653306, 1644.351504148928, 1553.418014526989];
let H_I_y=[-577.35026918962, -893.940549431369, -1161.126582696591, -716.135491367191, -67.1024014974758];
let H_I_z=[0.0, 95.7906634124988, 293.12252343978446, -92.2176166347783, -764.2695873454819];
let J_K_x=[-788.67513459481, -410.5818798363217, 543.0463284615656, 1106.84508566588, 1366.0254028115237];
let J_K_y=[211.32486540519, -337.6225526469056, -660.7493456344802, -110.2468639272329, 479.2740558277367];
let J_K_z=[0.0, -482.9572314385042, -326.01035262785354, -195.4285070248963, -187.18775378817];
let last_x=[-211.324865405191, 178.2916590293827, 906.7112361538999, 1603.2492696199754, 2098.076212434893];
let last_y=[788.67513459481, 221.5895877989054, 19.01191106961882, 236.1120696442054, 501.4880546152497];
let last_z=[0.0, -567.6708895371662, -57.05099610005453, 352.5541952155804, -548.123782821447];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
