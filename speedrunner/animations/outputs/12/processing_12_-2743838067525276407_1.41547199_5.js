

function setup() {
  createCanvas(1000, 800, WEBGL);
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 1015.1336890550068, 1338.909022924656, 1567.861492642365, 1500.000000850972];
let E_y=[-500.0, -364.58932583705, -18.188502386583, 397.281664437578, 741.6697497844061];
let E_z=[0.0, 377.4032917298177, 470.608682490503, 207.0786213314357, -237.344560772815];
let F_x=[500.0, 741.5524299949489, 1367.6065364241497, 1976.282202092222, 1964.101616789262];
let F_y=[-866.02540378444, -771.511672654253, -441.463477721143, 132.499939555736, 755.7528591295062];
let F_z=[0.0, 543.2848482182117, 767.195837312831, 383.2386471380757, -466.168835153334];
let G_x=[0.0, 310.1070839774258, 1210.7832520696556, 2139.121300540514, 2082.903771238443];
let G_y=[-1000.0, -1053.508250901481, -934.774217714792, -345.057026141042, 409.3640648000102];
let G_z=[0.0, 495.5141910341088, 766.7912111835315, 267.6014344331717, -832.024057464445];
let H_x=[-500.0, -204.2942925677972, 924.0682177015526, 2467.445471264641, 2477.78600659562];
let H_y=[-866.02540378444, -1073.0947060045748, -1257.770444100488, -655.612346159837, 498.6969887115941];
let H_z=[0.0, 549.8905371416128, 1052.1280634109025, 520.0055242523697, -1154.571482405103];
let I_x=[-866.02540378444, -636.2157520817982, 643.9198956144866, 2727.549864172311, 2753.866087941191];
let I_y=[-500.0, -823.9718639973678, -1256.7261115150638, -578.1092388744951, 934.4187070516631];
let I_z=[0.0, 688.9259816608727, 1487.4038603860674, 960.7868369034077, -1111.263685392073];
let J_x=[-1000.0, -846.7476042258342, 503.6714028899516, 2734.2892369295123, 2635.063934235513];
let J_y=[0.0, -386.2597931868898, -932.1382570917508, -167.7152907281921, 1280.807501962987];
let J_z=[0.0, 867.9055188452097, 1865.4544885835214, 1276.1922595119117, -745.4084633903941];
let K_x=[-866.02540378444, -768.1809779920314, 570.0722690686898, 2482.8664279490904, 2240.181699052612];
let K_y=[500.0, 99.2695052342612, -438.49044180508974, 283.4464544021069, 1191.4745789180524];
let K_z=[0.0, 1029.2677760431648, 2006.3514433573525, 1241.7126526915206, -422.8610379963551];
let L_x=[-500.0, -425.7835823138055, 811.5198259691898, 2152.2470301477983, 1964.101617137844];
let L_y=[866.02540378444, 476.4655946335632, -10.72821686270077, 454.2339746527699, 755.7528608628244];
let L_z=[0.0, 1121.1172507600281, 1843.0365677022694, 881.8909897037587, -466.1688342465834];
let M_x=[0.0, 8.9594627101405, 817.4996792818764, 1669.4248292658542, 2177.180350802391];
let M_y=[1000.0, 714.3728024719412, 307.32457284723023, 302.1553224998199, 300.8479513938144];
let M_z=[0.0, 971.6253188941871, 1434.6790567597025, 773.7059707502096, -341.2361762582284];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 449.1878002533338, 1146.871709511367, 1957.697215111445, 2098.076212850209];
let F_G_y=[-788.67513459481, -789.238779271018, -642.870201117858, -163.429167088987, 501.4880534043801];
let F_G_z=[0.0, 483.9125445397577, 761.917065161894, 420.6145695537737, -548.123784100367];
let H_I_x=[-577.35026918963, -362.2033495117752, 694.6216728701306, 2475.579434184611, 2720.943813089055];
let H_I_y=[-577.35026918962, -820.133479500363, -1152.348385754563, -653.283684718908, 642.3973649838111];
let H_I_z=[0.0, 569.6830887099746, 1211.9932258324595, 818.7442285746357, -1056.894051656936];
let J_K_x=[-788.67513459481, -694.2858231641782, 473.4006751176376, 2486.209785617357, 2533.551203961097];
let J_K_y=[211.32486540519, -129.7082267798988, -640.3596462042668, -5.9486801365381, 1188.7738238814452];
let J_K_z=[0.0, 851.9965098671257, 1808.3114859870266, 1316.2490568300357, -479.8122187481571];
let last_x=[-211.324865405191, -154.2051989212915, 854.2480439898268, 1964.7071894961803, 2098.076212434929];
let last_y=[788.67513459481, 465.2621263713512, 34.37121445775623, 263.4430609050414, 501.4880546152574];
let last_z=[0.0, 996.8753035366932, 1550.7067229097925, 748.6842598560567, -548.1237828214731];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
