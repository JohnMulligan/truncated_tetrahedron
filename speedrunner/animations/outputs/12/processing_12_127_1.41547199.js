

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 736.5965305090687, 415.0380612968827, 57.124879582456, -190.598922641515];
let E_y=[-500.0, -439.223132531495, -265.73898046531, -7.5189910079545, 288.675133509671];
let E_z=[0.0, -403.1834758090653, -647.275799147211, -666.117282540939, -511.4064571084297];
let F_x=[500.0, 308.7662521194637, -95.8265055454773, -376.958394951818, -345.299462277335];
let F_y=[-866.02540378444, -703.392259284371, -276.4895398920508, 256.4723602679705, 711.324864062906];
let F_z=[0.0, -526.1676934746553, -730.0466409219987, -566.9736006835493, -255.70322926257873];
let G_x=[0.0, -189.2228220063453, -538.8129323453983, -638.998804975926, -337.0356679406824];
let G_y=[-1000.0, -797.2423826798275, -280.4410496807684, 313.0465218438798, 718.2335118788213];
let G_z=[0.0, -420.5825201731813, -462.2844261258257, -124.1605699499183, 261.8227823732063];
let H_x=[-500.0, -597.2130832217833, -703.0873270060183, -542.4730293230474, -174.0713339590494];
let H_y=[-866.02540378444, -690.5904884407075, -275.7128377882648, 121.9333670305488, 302.4924291491583];
let H_z=[0.0, -120.3850640885473, 28.5727422055663, 347.1224969249967, 523.6455667366203];
let I_x=[-866.02540378444, -783.9913222771243, -510.4653301365593, -156.0892044646584, -19.37079413350342];
let I_y=[-500.0, -417.7367514633215, -264.5552379846934, -180.8306037285352, -120.1573018571187];
let I_z=[0.0, 277.8785672713627, 508.9074866492303, 511.4109941763697, 267.94233975437425];
let J_x=[-1000.0, -689.4880363086095, -52.6229905876093, 245.1203024498616, -27.63458811816882];
let J_y=[0.0, -66.4333018547205, -252.2785714237675, -379.7345791411822, -127.06595060204837];
let J_z=[0.0, 646.1233332428117, 750.1104468417303, 251.7625153485997, -249.58367187462474];
let K_x=[-866.02540378444, -344.0963023461625, 452.5353122421997, 375.5700364652346, -190.59892193753183];
let K_y=[500.0, 250.3376217739955, -244.72576519406852, -333.1964647363831, 288.67513165163064];
let K_z=[0.0, 865.9185208264777, 637.3840673589883, -247.0022220116953, -511.40645709484676];
let L_x=[-500.0, 141.1029000630075, 764.5857534514297, 142.4044046916646, -345.2994619528088];
let L_y=[866.02540378444, 430.6997408996535, -245.49148368555288, -74.3426155630891, 711.3248631109386];
let L_z=[0.0, 866.5760899338713, 224.3790695109793, -629.8568489380503, -255.70323097620974];
let M_x=[0.0, 610.0652960289455, 735.0117982876427, -288.4066647350954, -337.0356683201418];
let M_y=[1000.0, 416.6470325180389, -254.21129268524678, 212.5718771880979, 718.2335127849129];
let M_z=[0.0, 647.8845606325433, -292.3399436268167, -624.2811211985938, 261.82278064600524];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 41.8477911379777, -281.5569514760503, -412.644622232583, -211.3248666122788];
let F_G_y=[-788.67513459481, -608.020069164814, -146.875240783454, 391.5840878642145, 788.675133585678];
let F_G_z=[0.0, -431.4308051147665, -535.057583798116, -302.799961337256, -8.93868735493118e-07];
let H_I_x=[-577.35026918963, -601.6957572169513, -540.6752121149412, -260.389664022789, 45.72696946196458];
let H_I_y=[-577.35026918962, -439.7926750771615, -139.4171944820194, 90.1317016737328, 132.9058248288533];
let H_I_z=[0.0, 42.0857330503677, 239.1961028030603, 440.5785110624107, 412.98623850173124];
let J_K_x=[-788.67513459481, -452.6309736552093, 181.5025254189957, 372.4582597102676, 32.69207179571758];
let J_K_y=[211.32486540519, 114.3359157302185, -120.0525911773984, -223.6095374862732, 122.0084658712883];
let J_K_z=[0.0, 622.9367137831127, 619.6576569920303, 31.0219130887387, -403.33355525389976];
let last_x=[-211.324865405191, 312.6981188754765, 673.7153728611167, 4.6743876664496, -211.32486664116013];
let last_y=[788.67513459481, 398.8301528846875, -121.2603974460775, 184.6936511879919, 788.6751335615536];
let last_z=[0.0, 623.9739305916747, -31.7958875401947, -572.8739357540413, -2.703008735493118e-06];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
