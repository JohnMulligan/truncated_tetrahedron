

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, 89.6882335981333, 168.262186691222, 225.984874615484, 255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, -51.2184699417077, -18.186722222215, 135.4859485268883, 374.375508449854];
let E_x=[866.025403784439, 1015.1336890550068, 1338.909022924656, 1567.861492642365, 1500.000000850972];
let E_y=[-500.0, -364.58932583705, -18.188502386583, 397.281664437578, 741.6697497844061];
let E_z=[0.0, -377.4032917298177, -470.608682490503, -207.0786213314357, 237.344560772815];
let F_x=[500.0, 776.2606013973108, 1312.210499339639, 1569.1554602590547, 1345.299463088523];
let F_y=[-866.02540378444, -578.127525929253, 100.792838480058, 777.93199615074, 1164.319480839613];
let F_z=[0.0, -783.9623618849178, -973.67907696337, -557.8675080504858, -18.35866737673];
let G_x=[0.0, 403.0691490041668, 1070.960197167037, 1207.5384845915607, 845.299463151269];
let G_y=[-1000.0, -535.5498308342541, 433.91456693278, 1131.813321601661, 1226.4973086729563];
let G_z=[0.0, -1140.1427546246357, -1287.967794809582, -667.1852231625417, -137.030948132584];
let H_x=[-500.0, 15.5809421639918, 729.9782036588191, 740.4136100237698, 500.000000422414];
let H_y=[-866.02540378444, -250.5495968572211, 822.63153056346, 1207.0289195329178, 866.0254055200053];
let H_z=[0.0, -1331.3937640963668, -1263.8930212897633, -457.2181833229887, -8.70393e-07];
let I_x=[-866.02540378444, -261.5844485127192, 451.5506668254661, 500.2855941081398, 654.700537248169];
let I_y=[-500.0, 185.2146270314479, 1081.938714752626, 950.0394784757398, 443.3756741342653];
let I_z=[0.0, -1296.20740564803, -912.9128460776643, -77.4232971164187, 255.703227299499];
let J_x=[-1000.0, -339.2882276652574, 368.1917173629878, 658.0802685881848, 1154.700536974218];
let J_y=[0.0, 631.5972841159829, 1088.4220833497568, 543.7729828825148, 381.1978454331149];
let J_z=[0.0, -1045.899917564506, -402.0719276820503, 201.8571492010063, 374.375508490546];
let K_x=[-866.02540378444, -192.5401854708134, 519.5750127313758, 1101.4776033443247, 1500.000000428571];
let K_y=[500.0, 945.0378373997469, 838.9959575337019, 277.4145093217188, 741.6697480488119];
let K_z=[0.0, -660.9723606133462, 25.5013386418827, 181.8281820628789, 237.344561643204];
let L_x=[-500.0, 131.4642339683806, 833.6515522613828, 1514.8623714441417, 1345.299464539499];
let L_y=[866.02540378444, 1024.7310843691903, 452.3716063524299, 340.5610253179846, 1164.319479765099];
let L_z=[0.0, -265.2207781749901, 166.3087632388767, -123.2533536808281, -18.358666547036];
let M_x=[0.0, 528.5223970917576, 1160.9405048499539, 1603.9826296141675, 845.299465024663];
let M_y=[1000.0, 845.0469850835643, 112.55809150072291, 688.2641281319876, 1226.4973093340334];
let M_z=[0.0, 14.0776858238709, -46.6652001198583, -496.2269778264631, -137.030948173279];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, -222.2592267591927, -294.095236664724, -142.748505427219, 187.1877533091381];
let F_G_x=[211.324865405187, 503.9347437579308, 1059.492755504076, 1315.515739286603, 1122.00846913523];
let F_G_y=[-788.67513459481, -484.204243377333, 212.457945211866, 854.643261124759, 1145.940724140712];
let F_G_z=[0.0, -863.5452855098277, -1087.613458807813, -696.0654503222377, -216.145802445202];
let H_I_x=[-577.35026918963, -107.2698836092192, 521.6447162550711, 578.6961926419227, 577.350268648828];
let H_I_y=[-577.35026918962, -34.6590475945631, 825.600752433292, 973.2846047689, 577.3502706671053];
let H_I_z=[0.0, -1165.2151167828542, -1049.639108315645, -364.8738835103677, -8.93874e-07];
let J_K_x=[-788.67513459481, -229.8359605725337, 390.158454881072, 827.5936649097158, 1366.025402811531];
let J_K_y=[211.32486540519, 669.4427567193059, 835.827295635228, 332.4600385822008, 479.2740558277303];
let J_K_z=[0.0, -770.3925330741201, -243.8640481712503, 75.6492036678213, 187.187753788169];
let last_x=[-211.324865405191, 281.2324976485106, 885.5671690548778, 1479.6462401508197, 1122.008470883126];
let last_y=[788.67513459481, 795.1469212791559, 225.9852712241749, 432.0642125872808, 1145.940723923337];
let last_z=[0.0, -146.1536679827601, -21.7614190793138, -405.5712388622861, -216.14580203036];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
