function p_12_63_1_41547199(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 736.5965305090687, 415.0380612968827, 57.124879582456, -190.598922641515];
let E_y=[-500.0, -439.223132531495, -265.73898046531, -7.5189910079545, 288.675133509671];
let E_z=[0.0, -403.1834758090653, -647.275799147211, -666.117282540939, -511.4064571084297];
let F_x=[500.0, 308.7662521194637, -95.8265055454773, -376.958394951818, -345.299462277335];
let F_y=[-866.02540378444, -703.392259284371, -276.4895398920508, 256.4723602679705, 711.324864062906];
let F_z=[0.0, -526.1676934746553, -730.0466409219987, -566.9736006835493, -255.70322926257873];
let G_x=[0.0, -207.0263490277303, -517.1305163503613, -448.9193325965619, -1.873382e-06];
let G_y=[-1000.0, -699.0244268377659, 8.3869427384282, 687.9667871898826, 999.999999657151];
let G_z=[0.0, -569.6200475265912, -633.62303097646, -290.2365857763563, -5.66676735493118e-07];
let H_x=[-500.0, -663.2055608477623, -972.7646399978063, -882.766940530829, -118.802156957835];
let H_y=[-866.02540378444, -670.382513468595, -30.783668506402, 887.3748349344995, 1484.827556410691];
let H_z=[0.0, -326.6604625480862, -391.110348805287, -90.3319184583703, 137.03094699920428];
let I_x=[-866.02540378444, -913.0601893096753, -1245.8754700421723, -1369.683595149405, -582.903772577885];
let I_y=[-500.0, -626.6780071202851, -375.358607336348, 712.7556046561215, 1680.979978107236];
let I_z=[0.0, 124.5731501096278, -117.929495753811, -109.5539969922998, 18.358666021010265];
let J_x=[-1000.0, -876.2348172309137, -1206.4792964000137, -1563.076526495408, -928.203233627745];
let J_y=[0.0, -581.9666563775, -861.34170800575, 288.4050351686145, 1392.304843267594];
let J_z=[0.0, 638.9601440326178, 55.902491513323, -334.2203289429288, -237.34456265456174];
let K_x=[-866.02540378444, -564.5728039060687, -873.3262389851658, -1325.286463460509, -809.401079440159];
let K_y=[500.0, -550.6280197213127, -1257.435345105131, -83.6193490700195, 907.477286411528];
let K_z=[0.0, 1051.069197238157, 47.65243601996365, -604.4108837090848, -374.3755106352737];
let L_x=[-500.0, -78.3073579606557, -404.9763608364768, -825.5750565422819, -345.29946407108];
let L_y=[866.02540378444, -542.7408747110477, -1375.12366782675, -138.506392799984, 711.324863857896];
let L_z=[0.0, 1228.362461222477, -138.75315071016135, -727.8009751164228, -255.70323009225473];
let M_x=[0.0, 426.1743325394303, -24.3349739439718, -419.6425247823449, -2.375334e-06];
let M_y=[1000.0, -560.8417956402769, -1158.39437955693, 162.813121144877, 999.999997942976];
let M_z=[0.0, 1113.8208834316497, -414.59684308273137, -616.5601435565889, -1.437028735493118e-06];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 41.8477911379777, -281.5569514760503, -412.644622232583, -211.3248666122788];
let F_G_y=[-788.67513459481, -608.020069164814, -146.875240783454, 391.5840878642145, 788.675133585678];
let F_G_z=[0.0, -431.4308051147665, -535.057583798116, -302.799961337256, -8.93868735493118e-07];
let H_I_x=[-577.35026918963, -677.7066114250713, -1000.2515590633222, -1096.9742633949688, -398.717477915059];
let H_I_y=[-577.35026918962, -562.8417394018468, -208.6610149748088, 706.1204256527775, 1553.418010741422];
let H_I_z=[0.0, -48.1984383467302, -152.530139293512, 12.5197194690377, 216.14580113648125];
let J_K_x=[-788.67513459481, -619.6201008636223, -938.1099939638223, -1402.0226557129452, -943.375675753079];
let J_K_y=[211.32486540519, -492.3162782718831, -975.226589637286, 36.7709406408795, 1098.076209093765];
let J_K_z=[0.0, 763.1700249853568, 121.66379261607, -341.8577797111288, -187.18775544757975];
let last_x=[-211.324865405191, 147.3908311959903, -199.3581875910638, -613.8027334933519, -211.324867819328];
let last_y=[788.67513459481, -479.8754879668234, -1160.862297162721, -49.8051525616044, 788.675132576595];
let last_z=[0.0, 1042.8236026565548, -172.36310979115035, -536.4871736078206, -1.787714735493118e-06];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}