

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 778.6895587085387, 544.3622538224527, 238.4879150795, -39.60071698804];
let E_y=[-500.0, -483.674662614548, -427.239089925989, -312.740456018712, -123.859635250677];
let E_z=[0.0, -234.57696515752943, -381.8673935677309, -386.431814788531, -249.583673615407];
let F_x=[500.0, 420.5447703170017, 213.5406391587917, -50.659128547546, -290.030281802764];
let F_y=[-866.02540378444, -825.699369549711, -729.493247354872, -622.743521376897, -511.470110194639];
let F_z=[0.0, -385.24415742252745, -640.9980093185759, -683.486151672196, -484.088140974876];
let G_x=[0.0, -80.6660772966483, -273.3989075645443, -481.893299760233, -639.032076688575];
let G_y=[-1000.0, -918.6862213409026, -721.6675541552735, -520.834028126105, -408.83243626314];
let G_z=[0.0, -475.1903861344134, -816.4341196093039, -951.069292387367, -852.344094745541];
let H_x=[-500.0, -495.9134663917563, -532.4986129078673, -705.166495745877, -984.331537756213];
let H_y=[-866.02540378444, -816.5147126527776, -760.4147828775671, -784.397132398743, -769.304340709833];
let H_z=[0.0, -766.8747722321524, -1262.881414806024, -1336.598490311014, -989.37504279045];
let I_x=[-866.02540378444, -691.6502324026093, -440.4431877023692, -561.550335805702, -980.6292043206857];
let I_y=[-500.0, -552.0440874999387, -827.2936708887179, -1225.825642077194, -1232.413919487467];
let I_z=[0.0, -1166.4890854067414, -1767.858845449953, -1565.64971139097, -758.15003721653];
let J_x=[-1000.0, -604.9257324390421, -41.0452691092052, -153.272423395247, -631.6274098134177];
let J_y=[0.0, -210.3303944635676, -890.4740414486349, -1530.905762138906, -1335.051594331576];
let J_z=[0.0, -1545.5138939993114, -2091.028670511778, -1475.1817114572284, -389.894083341476];
let K_x=[-866.02540378444, -263.6313184340191, 475.6066602950868, 229.050415726262, -286.3279483549567];
let K_y=[500.0, 98.7282767953134, -919.8859812972113, -1482.4780200786513, -974.579690511774];
let K_z=[0.0, -1782.0515297357624, -2078.582222492904, -1129.5906338580764, -252.863134632282];
let L_x=[-500.0, 222.4697637271019, 863.6185266840328, 313.2764698880028, -290.03028102113956];
let L_y=[866.02540378444, 275.7359750558954, -901.5312426840994, -1115.0138292362863, -511.470111448426];
let L_z=[0.0, -1800.0294358818924, -1736.443233859728, -774.8721078687515, -484.088139646287];
let M_x=[0.0, 697.0431867981139, 938.3208977196769, 39.4526831869918, -639.0320751499136];
let M_y=[1000.0, 263.7654881795941, -844.145535658414, -690.0783477471542, -408.832435691718];
let M_z=[0.0, -1593.6657617778214, -1227.448510093427, -663.5187835383246, -852.344093625681];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 151.7662175450417, 2.4338476087097, -184.029419395743, -362.32307024748];
let F_G_y=[-788.67513459481, -730.825589523259, -606.678519561867, -513.806159726925, -489.389019668966];
let F_G_z=[0.0, -475.0965525511094, -813.2387207534829, -927.743012850856, -773.229240884809];
let H_I_x=[-577.35026918963, -503.2243634244163, -406.2571423615293, -536.2094551865299, -906.981268113558];
let H_I_y=[-577.35026918962, -569.6653327905436, -667.7964712173317, -929.537493199821, -1057.979475183254];
let H_I_z=[0.0, -935.1849974807865, -1517.442482011011, -1535.857596976176, -989.375043670756];
let J_K_x=[-788.67513459481, -366.4294500615303, 223.7332720451638, 107.787819858302, -356.4831935998627];
let J_K_y=[211.32486540519, -30.6631470938366, -767.4540457275076, -1410.755702703542, -1219.875039227606];
let J_K_z=[0.0, -1533.0398813438244, -2027.1944925662478, -1393.157872927646, -408.506415695261];
let last_x=[-211.324865405191, 400.3222227386909, 835.7638939425328, 240.641809063102, -362.3230690275027];
let last_y=[788.67513459481, 248.5399934061264, -738.5021938352203, -831.1359623608162, -489.389020027747];
let last_z=[0.0, -1561.3973364428705, -1487.521466745435, -833.6425104718285, -773.229239597474];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
