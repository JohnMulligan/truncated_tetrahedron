function p_12_256_1_41547199(){


  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 778.6895587085387, 544.3622538224527, 238.4879150795, -39.60071698804];
let E_y=[-500.0, -483.674662614548, -427.239089925989, -312.740456018712, -123.859635250677];
let E_z=[0.0, -234.57696515752943, -381.8673935677309, -386.431814788531, -249.583673615407];
let F_x=[500.0, 420.5447703170017, 213.5406391587917, -50.659128547546, -290.030281802764];
let F_y=[-866.02540378444, -825.699369549711, -729.493247354872, -622.743521376897, -511.470110194639];
let F_z=[0.0, -385.24415742252745, -640.9980093185759, -683.486151672196, -484.088140974876];
let G_x=[0.0, -20.3813374677193, -62.6908684581123, -117.2778847426857, -191.4580523372582];
let G_y=[-1000.0, -907.5521370330596, -727.3863315407882, -625.4407590186592, -620.520412235097];
let G_z=[0.0, -643.7658864130615, -1078.766107215816, -1196.81242088432, -980.415391520535];
let H_x=[-500.0, -402.2831012651553, -152.863311183725, 86.0516289936373, 157.5437420521848];
let H_y=[-866.02540378444, -702.9084045825056, -421.9211029173442, -318.9122447503612, -341.960239452434];
let H_z=[0.0, -926.9993201885235, -1486.8213940410758, -1561.01919074911, -1242.238175256699];
let I_x=[-866.02540378444, -602.3375990361553, -14.060233999181, 414.5971700662933, 407.9733073628768];
let I_y=[-500.0, -277.5833728052716, 41.52005396662681, 78.65156558038782, 45.650235679363];
let I_z=[0.0, -1143.8541280586985, -1670.9550202511318, -1516.859972145393, -1007.733708737337];
let J_x=[-1000.0, -556.205567879752, 287.656761142516, 634.4963144706093, 309.4010785616172];
let J_y=[0.0, 231.6347363752134, 442.36807208673383, 284.2602649909168, 154.700538458008];
let J_z=[0.0, -1224.5879215726718, -1543.530871664729, -1095.767795243376, -511.406458221954];
let K_x=[-866.02540378444, -278.723469429135, 608.689214900213, 589.2223695019499, -39.6007156595558];
let K_y=[500.0, 660.9769591738744, 589.8443119932728, 151.55926080096282, -123.859633774313];
let K_z=[0.0, -1143.2360119892937, -1165.194890388212, -597.480823885417, -249.583673675946];
let L_x=[-500.0, 140.868044985963, 796.245715121444, 311.0018401375509, -290.0302814662028];
let L_y=[866.02540378444, 872.3631101667094, 413.75928757505284, -224.99337458222516, -511.470109093949];
let L_z=[0.0, -925.9618795427258, -716.0113913240499, -376.6853478056419, -484.088139355186];
let M_x=[0.0, 567.624702391115, 761.0610732193236, -2.1247609052261, -191.4580533291561];
let M_y=[1000.0, 797.8095684209505, -2.08151912130619, -577.3632256296102, -620.520412610795];
let M_z=[0.0, -642.6427711072588, -409.7636862037459, -590.5460787109649, -980.415389840292];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 151.7662175450417, 2.4338476087097, -184.029419395743, -362.32307024748];
let F_G_y=[-788.67513459481, -730.825589523259, -606.678519561867, -513.806159726925, -489.389019668966];
let F_G_z=[0.0, -475.0965525511094, -813.2387207534829, -927.743012850856, -773.229240884809];
let H_I_x=[-577.35026918963, -450.6266323848343, -139.799679198017, 136.6924438304403, 188.1750040803808];
let H_I_y=[-577.35026918962, -408.0307430544176, -124.85285896460519, -30.30332523153617, -50.002056144722];
let H_I_z=[0.0, -921.8548855603404, -1456.8848372715559, -1502.224659337767, -1186.215479291031];
let J_K_x=[-788.67513459481, -377.8602606220143, 336.113704307822, 483.5504184511294, 32.6920724461008];
let J_K_y=[211.32486540519, 395.1845785376644, 507.4248703212948, 294.01361213139285, 122.0084682983812];
let J_K_z=[0.0, -1049.200356492307, -1255.892322197544, -838.0148007477089, -403.333557084445];
let last_x=[-211.324865405191, 283.982527590313, 631.9560004200256, 44.6991915641439, -362.3230705920508];
let last_y=[788.67513459481, 728.6145807091511, 229.6771096549588, -299.94178865433315, -489.389019287775];
let last_z=[0.0, -706.4829451897527, -547.3726090331539, -489.7429971173999, -773.22923914977];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
}