

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 938.8705551622656, 772.3235337367877, 544.345117255487, 309.401077569691];
let D_y=[0.0, 8.523869342042, 35.522025680641, 83.904756529727, 154.700538082337];
let D_z=[0.0, -240.2201864001283, -424.704260556925, -517.09603969575, -511.406456541736];
let E_x=[866.025403784439, 736.5965305090687, 415.0380612968827, 57.124879582456, -190.598922641515];
let E_y=[-500.0, -439.223132531495, -265.73898046531, -7.5189910079545, 288.675133509671];
let E_z=[0.0, -403.1834758090653, -647.275799147211, -666.117282540939, -511.4064571084297];
let F_x=[500.0, 444.5829346680887, 227.5187242670767, -159.392701685312, -511.106998080949];
let F_y=[-866.02540378444, -851.084409103767, -746.949086289197, -439.7524262068765, 92.522709676469];
let F_z=[0.0, -288.9576418860873, -612.3111781140491, -851.167510666228, -867.4233002964927];
let G_x=[0.0, 27.4369432892947, -6.3668950566943, -263.631778789374, -639.032075941619];
let G_y=[-1000.0, -1032.846329966811, -1055.137250793784, -888.1530962241105, -408.832438303842];
let G_z=[0.0, -42.1763248624803, -268.4118254482521, -614.481544956995, -852.3440934503864];
let H_x=[-500.0, -201.5190467463113, 67.3910909821913, -366.381454167931, -1054.410047789284];
let H_y=[-866.02540378444, -1127.404258045876, -1509.557313370639, -1354.5489631218916, -577.846291215466];
let H_z=[0.0, 412.3422614410217, -31.7446358036911, -814.147746356696, -1110.8874175931812];
let I_x=[-866.02540378444, -168.6508017684878, 413.6884843112583, -394.503349283643, -1341.86294223658];
let I_y=[-500.0, -1104.3475429340247, -1893.933684873432, -1506.9541852346324, -245.504996334058];
let I_z=[0.0, 928.4209945733337, -14.9484209038739, -1308.04145933449, -1384.5099488685703];
let J_x=[-1000.0, 115.4709653505852, 867.7093383427373, -327.9799818176257, -1213.937865154722];
let J_y=[0.0, -971.0914243371436, -2025.327201636527, -1236.8850054615746, 255.850151827227];
let J_z=[0.0, 1340.0844745381446, -226.0171307788439, -1744.603565052346, -1399.5891563043551];
let K_x=[-866.02540378444, 559.4702282069212, 1213.3680622830143, -214.1634354955427, -798.559893483818];
let K_y=[500.0, -770.4922266223266, -1841.202750032205, -736.5797138872045, 424.86400566266];
let K_z=[0.0, 1514.9381530534306, -564.4952324582739, -1813.0842297476797, -1141.045832481462];
let L_x=[-500.0, 1020.5529700748662, 1286.1526763136073, -134.0696124897774, -511.106998434484];
let L_y=[866.02540378444, -567.0643929203126, -1429.192077701993, -362.1612633537865, 92.52271152408];
let L_z=[0.0, 1396.7475694269797, -869.2882741727159, -1464.7381434375188, -867.423300936309];
let M_x=[0.0, 1350.430979098771, 1051.4222466892502, -144.7101999313974, -639.032074737538];
let M_y=[1000.0, -426.2320802471356, -985.38655083139, -380.1449325284838, -408.832436818189];
let M_z=[0.0, 1023.5238412147047, -995.3337903904209, -947.5219816898128, -852.3440929108486];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 716.685995923294, 524.25541055218, 272.05674770476, 32.692071226064];
let D_E_y=[-211.324865405191, -191.332825969573, -129.917842977751, -24.822741134593, 122.008467324608];
let D_E_z=[0.0, -237.4416162738693, -404.498974243615, -459.184274603465, -403.33355616918];
let F_G_x=[211.324865405187, 256.0782719164927, 228.4717338099617, -69.467317392231, -472.861427845777];
let F_G_y=[-788.67513459481, -840.982321439634, -888.954732935818, -706.6062664983635, -187.392611210891];
let F_G_z=[0.0, -57.2674663870533, -349.347519844833, -751.073301750486, -964.8968196079137];
let H_I_x=[-577.35026918963, -105.0655205987583, 344.8139129432777, -231.5395455097489, -1128.057983555133];
let H_I_y=[-577.35026918962, -990.1332947491666, -1605.734340966595, -1442.2759126985165, -453.986657597812];
let H_I_z=[0.0, 659.6675480704607, 23.9595354493719, -1066.01683827636, -1372.7102015417404];
let J_K_x=[-788.67513459481, 343.0940252491602, 1060.9638292675363, -126.608893929836, -926.275328783975];
let J_K_y=[211.32486540519, -779.9417202092176, -1812.9879400026134, -1016.2822192836614, 336.826020314003];
let J_K_z=[0.0, 1309.0050490085227, -308.9697508894149, -1754.628193248424, -1396.4953934497423];
let last_x=[-211.324865405191, 1070.3830122532631, 1175.770659801571, -0.2728806512737, -472.861427398573];
let last_y=[788.67513459481, -459.0647719586766, -1163.102795093566, -425.6931755452255, -187.392609458304];
let last_z=[0.0, 1122.5771001096498, -789.7351372848319, -1205.1644002359558, -964.8968196606501];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
