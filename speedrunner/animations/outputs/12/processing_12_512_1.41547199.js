

function setup() {
  var canvas=createCanvas(1000, 800, WEBGL);
  canvas.parent('processinganimationdiv');
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994, 499.99999999999994];
let B_y=[866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387, 866.0254037844387];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[866.025403784439, 850.535244067887, 805.984325302584, 737.893454266081, 654.700538699134];
let C_y=[500.0, 495.849424213321, 483.912041508093, 465.667147601931, 443.375673059777];
let C_z=[0.0, -89.6882335981333, -168.262186691222, -225.984874615484, -255.703228129195];
let D_x=[1000.0, 1042.864753634069, 1138.348936967173, 1204.577642494397, 1154.700538847592];
let D_y=[0.0, 36.389030840084, 133.598236885498, 260.813528484254, 381.1978460942131];
let D_z=[0.0, 51.2184699417077, 18.186722222215, -135.4859485268883, -374.375508449854];
let E_x=[866.025403784439, 944.5849274526746, 1147.0888677576565, 1377.589930060282, 1499.999999914293];
let E_y=[-500.0, -439.223132531494, -265.738980465307, -7.518991007949, 288.6751335096779];
let E_z=[0.0, 230.3366941677387, 347.432212516945, 271.9617165361357, 1.264882e-06];
let F_x=[500.0, 587.3034106654026, 828.0444560823036, 1133.778218108108, 1345.299461215167];
let F_y=[-866.02540378444, -778.026065978808, -524.04001797077, -148.328295177557, 258.3302477881796];
let F_z=[0.0, 390.0604634721227, 662.773979229599, 706.3322742461917, 493.047791715136];
let G_x=[0.0, 85.9250401759866, 333.0609301373656, 646.690434793316, 845.299461277915];
let G_y=[-1000.0, -871.0578053892801, -518.3697025075402, -61.3847321838906, 320.5080746176007];
let G_z=[0.0, 479.0212272883392, 814.129022081773, 858.4358594457907, 611.720072996997];
let H_x=[-500.0, -398.3025482403224, -102.28044395872644, 263.041161410081, 499.999999485737];
let H_y=[-866.02540378444, -688.3985358786551, -251.42675034819916, 191.4242886144504, 413.0307872374092];
let H_z=[0.0, 468.6084318182212, 729.4617868386996, 620.0034235931527, 237.344563960113];
let I_x=[-866.02540378444, -709.6475591870123, -270.78434206358844, 255.91628050641745, 654.700537248174];
let I_y=[-500.0, -288.7930639536061, 149.74065335596782, 430.1464530843164, 443.3756731303145];
let I_z=[0.0, 362.1709224651562, 449.0685933410016, 160.7538654071367, -255.703226773492];
let J_x=[-1000.0, -747.9787347548878, -92.25342511294443, 630.3873627188865, 1154.700536974219];
let J_y=[0.0, 199.2420221495699, 494.20186155029086, 484.8566304073278, 381.1978464370568];
let J_z=[0.0, 193.9399260852732, 106.3991021790336, -192.4137966388563, -374.375509016532];
let K_x=[-866.02540378444, -500.9684361772998, 348.34273265084056, 1119.9016655571954, 1499.99999949188];
let K_y=[500.0, 618.7504027302749, 618.0148371736508, 316.6114989218448, 288.6751337819988];
let K_z=[0.0, 18.0199913129592, -135.4573950712964, -188.11083495326116, -6.57489e-07];
let L_x=[-500.0, -48.0573194579998, 841.3078580139115, 1376.0173837453945, 1345.299462666118];
let L_y=[866.02540378444, 834.8145413767799, 462.25233107455085, 45.1698419847278, 258.330247717676];
let L_z=[0.0, -109.0115038925088, -161.3923001340566, 170.59985377416484, 493.047790359452];
let M_x=[0.0, 465.0944691226042, 1152.0213175651716, 1216.4284586297995, 845.299463151265];
let M_y=[1000.0, 777.946335723311, 101.04757492075883, -136.2531055847992, 320.5080742747883];
let M_z=[0.0, -146.3001280747537, 40.9377831869764, 628.3839530029928, 611.720073563699];
let first_x=[-211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747, -211.32486540518747];
let first_y=[788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124, 788.6751345948124];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259, 577.3502691896259];
let B_C_y=[577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257, 577.3502691896257];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[788.675134594813, 880.721272876952, 1101.605678867874, 1313.474699118106, 1366.025404018613];
let D_E_y=[-211.324865405191, -147.379705979625, 24.78269516733, 254.224357929886, 479.2740570878667];
let D_E_z=[0.0, 222.2592267591927, 294.095236664724, 142.748505427219, -187.1877533091381];
let F_G_x=[211.324865405187, 317.1631761960716, 598.3608902283136, 928.89822963876, 1122.008467657764];
let F_G_y=[-788.67513459481, -681.790604254987, -382.648515873859, 32.1187640935614, 431.4095434265379];
let F_G_z=[0.0, 474.1995572674437, 791.499657275652, 827.9030215592167, 590.521311680913];
let H_I_x=[-577.35026918963, -446.6333407414244, -88.32494339153743, 323.748944993302, 577.350268648834];
let H_I_y=[-577.35026918962, -393.6729563224321, 38.41402157294783, 430.8871411033794, 577.3502690835508];
let H_I_z=[0.0, 457.7749315296413, 657.949770973453, 451.8115546835167, 1.723577e-06];
let J_K_x=[-788.67513459481, -507.0950308417754, 193.28084651922558, 914.4210073248524, 1366.025402811527];
let J_K_y=[211.32486540519, 376.1293181164089, 581.7500010436438, 517.1842540312396, 479.2740574113098];
let J_K_z=[0.0, 192.4157241037942, 117.4399568460576, -105.2575521138123, -187.1877546178518];
let last_x=[-211.324865405191, 207.3044410343922, 970.8595197117636, 1318.4052043527104, 1122.008469405625];
let last_y=[788.67513459481, 716.9381453727137, 336.05797011858886, 89.0256833922028, 431.4095432092258];
let last_z=[0.0, -7.9574390541277, 76.5315273639056, 460.55484931158884, 590.521311266067];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 3, 2, 1];
let t=steparray[sec%8];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
