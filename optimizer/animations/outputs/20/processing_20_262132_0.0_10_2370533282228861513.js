

function setup() {
  createCanvas(1000, 800, WEBGL);
  fill(204);
  
  
  
}

function draw() {

  background(0);

let A_x=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let A_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let A_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let B_x=[309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474, 309.0169943749474];
let B_y=[951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535, 951.0565162951535];
let B_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let C_x=[587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473];
let C_y=[809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947];
let C_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let D_x=[809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947];
let D_y=[587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473];
let D_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let E_x=[951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153, 951.056516295153];
let E_y=[309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947];
let E_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let F_x=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let F_y=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let F_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let G_x=[951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154, 951.056516295154];
let G_y=[-309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943];
let G_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let H_x=[809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947];
let H_y=[-587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477];
let H_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let I_x=[587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473];
let I_y=[-809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943];
let I_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let J_x=[309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947];
let J_y=[-951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153];
let J_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let K_x=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let K_y=[-1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0];
let K_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let L_x=[-309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943];
let L_y=[-951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153];
let L_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let M_x=[-587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477];
let M_y=[-809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943];
let M_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let N_x=[-809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943];
let N_y=[-587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477];
let N_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let O_x=[-951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153];
let O_y=[-309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943];
let O_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let P_x=[-1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0, -1000.0];
let P_y=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let P_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let Q_x=[-951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153, -951.056516295153];
let Q_y=[309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947, 309.016994374947];
let Q_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let R_x=[-809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943, -809.016994374943];
let R_y=[587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473, 587.785252292473];
let R_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let S_x=[-587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477, -587.785252292477];
let S_y=[809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947, 809.016994374947];
let S_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let T_x=[-309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943, -309.016994374943];
let T_y=[951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157, 951.056516295157];
let T_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let U_x=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let U_y=[1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0];
let U_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let first_x=[-146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524, -146.55714625849524];
let first_y=[925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194, 925.3254041760194];
let first_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let B_C_x=[425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933, 425.32540417601933];
let B_C_y=[834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806, 834.7481064940806];
let B_C_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let D_E_x=[834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081, 834.748106494081];
let D_E_y=[425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019, 425.325404176019];
let D_E_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let F_G_x=[925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602, 925.32540417602];
let F_G_y=[-146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497, -146.557146258497];
let F_G_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let H_I_x=[662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453];
let H_I_y=[-662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457];
let H_I_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let J_K_x=[146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495, 146.557146258495];
let J_K_y=[-925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013, -925.325404176013];
let J_K_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let L_M_x=[-425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017];
let L_M_y=[-834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073, -834.748106494073];
let L_M_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let N_O_x=[-834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083, -834.748106494083];
let N_O_y=[-425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017, -425.325404176017];
let N_O_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let P_Q_x=[-925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023, -925.325404176023];
let P_Q_y=[146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497, 146.557146258497];
let P_Q_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let R_S_x=[-662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457, -662.459848116457];
let R_S_y=[662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453, 662.459848116453];
let R_S_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
let last_x=[-146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496, -146.557146258496];
let last_y=[925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017, 925.325404176017];
let last_z=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];


let sec=floor(millis()/1000);
let steparray=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1];
let t=steparray[sec%18];

background(0)

let angle=((sec*5)%360);




//adapted from
//from https://discourse.processing.org/t/how-to-rotate-around-a-sphere/25072/24
//and math.fandom.com/wiki/Ellipsoid
//and Simon Greenwold.

  let latitude = (frameCount%360)*3.141/180;
  let longitude = (((frameCount-(latitude/2))/5)%360)*3.141/180;
  let radius=5000;
  
  let cam_x = radius * cos(latitude)*cos(longitude);
  let cam_y = radius * cos(latitude)*sin(longitude);
  let cam_z = radius * sin(latitude);
  camera(cam_x, cam_y, cam_z, 0, 0, 0, 0, 1, 0);

/**
 * Points and Lines. 
 * 
 * Points and lines can be used to draw basic geometry.
 * Change the value of the variable 'd' to scale the form.
 * The four variables set the positions based on the value of 'd'. 
 */




//let cam_x=350 * cos(angle);
//let cam_y=350*sin(angle);
//let cam_x=350*cos(angle);
//let cam_y=350*sin(angle);
//console.log(angle,cam_x,cam_y);

//camera(cam_x,cam_y,-900,0,0,0,0,1,0);


fill(127);

beginShape();
vertex(A_x[t],A_y[t],A_z[t]);
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(first_x[t],first_y[t],first_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_x[t],B_y[t],B_z[t]);
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
endShape(CLOSE);
beginShape();
vertex(B_C_x[t],B_C_y[t],B_C_z[t]);
vertex(C_x[t],C_y[t],C_z[t]);
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_x[t],D_y[t],D_z[t]);
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
endShape(CLOSE);
beginShape();
vertex(D_E_x[t],D_E_y[t],D_E_z[t]);
vertex(E_x[t],E_y[t],E_z[t]);
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_x[t],F_y[t],F_z[t]);
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
endShape(CLOSE);
beginShape();
vertex(F_G_x[t],F_G_y[t],F_G_z[t]);
vertex(G_x[t],G_y[t],G_z[t]);
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_x[t],H_y[t],H_z[t]);
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
endShape(CLOSE);
beginShape();
vertex(H_I_x[t],H_I_y[t],H_I_z[t]);
vertex(I_x[t],I_y[t],I_z[t]);
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_x[t],J_y[t],J_z[t]);
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
endShape(CLOSE);
beginShape();
vertex(J_K_x[t],J_K_y[t],J_K_z[t]);
vertex(K_x[t],K_y[t],K_z[t]);
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_x[t],L_y[t],L_z[t]);
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
endShape(CLOSE);
beginShape();
vertex(L_M_x[t],L_M_y[t],L_M_z[t]);
vertex(M_x[t],M_y[t],M_z[t]);
vertex(N_x[t],N_y[t],N_z[t]);
vertex(N_O_x[t],N_O_y[t],N_O_z[t]);
endShape(CLOSE);
beginShape();
vertex(N_x[t],N_y[t],N_z[t]);
vertex(N_O_x[t],N_O_y[t],N_O_z[t]);
vertex(O_x[t],O_y[t],O_z[t]);
endShape(CLOSE);
beginShape();
vertex(N_O_x[t],N_O_y[t],N_O_z[t]);
vertex(O_x[t],O_y[t],O_z[t]);
vertex(P_x[t],P_y[t],P_z[t]);
vertex(P_Q_x[t],P_Q_y[t],P_Q_z[t]);
endShape(CLOSE);
beginShape();
vertex(P_x[t],P_y[t],P_z[t]);
vertex(P_Q_x[t],P_Q_y[t],P_Q_z[t]);
vertex(Q_x[t],Q_y[t],Q_z[t]);
endShape(CLOSE);
beginShape();
vertex(P_Q_x[t],P_Q_y[t],P_Q_z[t]);
vertex(Q_x[t],Q_y[t],Q_z[t]);
vertex(R_x[t],R_y[t],R_z[t]);
vertex(R_S_x[t],R_S_y[t],R_S_z[t]);
endShape(CLOSE);
beginShape();
vertex(R_x[t],R_y[t],R_z[t]);
vertex(R_S_x[t],R_S_y[t],R_S_z[t]);
vertex(S_x[t],S_y[t],S_z[t]);
endShape(CLOSE);
beginShape();
vertex(R_S_x[t],R_S_y[t],R_S_z[t]);
vertex(S_x[t],S_y[t],S_z[t]);
vertex(T_x[t],T_y[t],T_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);
beginShape();
vertex(T_x[t],T_y[t],T_z[t]);
vertex(U_x[t],U_y[t],U_z[t]);
vertex(last_x[t],last_y[t],last_z[t]);
endShape(CLOSE);

}

function polygon( x, y,  radius,  npoints) {
  var angle = 3 / npoints;
  beginShape();
  for (var a = 0; a < TWO_PI; a += angle) {
    var sx = x + cos(a) * radius;
    var sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
